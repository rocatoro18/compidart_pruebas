using System;
using System.Collections.Generic;
using System.Windows.Forms;

namespace CompiladorDART_RCTR
{
    class Sintactico
    {
        NodoClase claseActual = new NodoClase();
        string metodoActual;



        public List<Error> listaError; // lista de errores

        public List<Token> listaTokens;  // va ser una copia de la lista de tokens original   ***** COLA  *****

        public List<NodoVariable> listaparam = new List<NodoVariable>();

        private int[] listaSintactico = new int[100]; // analizador sintactico LIFO    **** PILA *****

        public bool error = false; // bandera de errores

        bool revision = false;   // bandera para decidir si sigo analisando o me salgo.

        int punteroLexico = 0;      // punteros de la lista de tokens y de la lista del analizador sintactico
        int punteroSintactico = 1;

        TipoSemantico swSemantico;
        public List<Token> listenerSemantico = new List<Token>();

        int intentosRecuperar;
        TipoRepecuracion tipoRecuperacion;
        enum TipoRepecuracion
        {
            Ninguna,
            Falta,
            Sobra,
            Diferentes,
            Urgencia,
            NoMas
        }

        enum TipoSemantico
        {
            Ninguno,

            ClaseIN,
            ClassOUT,

            HerenciaIN,
            HerenciaOUT,

            ParametrosIN,
            ParametrosOUT,

            MetodoIN,
            MetodoOUT,

            AtributosIN,
            ATributosOUT,

            VariablesIN,
            VariablesOUT,

            AsignacionIN,
            AsignacionOUT

        }

        public Sintactico(List<Token> listaTokenLexico)
        {
            //inicializo todo para poder empezar el analisis.
            listaError = new List<Error>();

            //Para el manejador semantico (Lista de errores del semantico y diccionario)
            TablaSimbolos.listaErroresSemantico = new List<Error>();
            TablaSimbolos.TablaSimbolosClase = new Dictionary<object, NodoClase>();

            listaTokens = listaTokenLexico; // copia de la lisat de tokens original
            listaTokens.Add(new Token() { Lexema = "$", Linea = 0, TipoToken = TipoToken.Cadena, ValorToken = -199 });

            listaSintactico[0] = -199; // estoy insertando $
            listaSintactico[1] = 1000; // S

            intentosRecuperar = 0;
            tipoRecuperacion = TipoRepecuracion.Ninguna;


        }

        public int[,] MatrizTransicionSintactico = new int[,]
        {

            //                      id      |     nument    |   numdec  |   cadenas   |   caracter  |       +       |       -       |       *       |       /       |       %       |       >       |       <       |       <=      |       >=      |       ==      |       !=      |       !       |       ||      |       &&      |       (       |       )       |       {       |       }       |       [       |       ]       |       ,       |       ;       |       :       |       ?       |       .       |       #       |       ++      |       --      |       +=      |       -=      |      *=       |       /=      |   abstracto   |   como    |   afirmar |   asincrono   |   esperar |   rotura  |   caso    |   dinamico    |   demas   |   enumerar    |   exportar    |   extender    |   externo |   fabrica |   implementos |   importar    |       en      |   interfaz    |       es      |   biblioteca  |   mezclando   |   show    |   estatico    |   super   |   cambiar |   sincronizar |   esto    |   lanzar  |   captura |   clase   |   constante   |   seguir  |   covariante  |   defecto |   diferido    |   hacer   |   falso   |   final   |   finalmente  |      por      |   Funcion |   obtener |   esconder    |       si      |   nuevo   |   nulo    |       en1     |   operador    |   parte   |   volverlanzar    |   regreso |   colocar |   verdadero   |   intentar    |   tipode  |       var     |       vacio       |   mientras    |       con     |   producir    |       int     |      doble      |     num     |   string  |   bool    |   Lista   |    Mapa    |  impresion   |       =       |   comentario  |   comentariomult  |   publico |   protegido   |   privado   |   leer  |   lambda  |   $   |  fechaYhora  |
            //                      -1              -2            -3           -4           -5              -6             -7              -8              -9             -10             -11             -12              -13             -14             -15             -16            -17              -18             -19            -20             -21             -22             -23             -24             -25             -26             -27             -28             -29             -30             -32              -33             -34             -35             -36            -37              -38             -39          -40           -41          -42           -43         -44        -45           -46           -47           -48            -49              -50            -51         -52           -53            -54              -55            -56              -57             -58             -59          -60           -61            -62         -63           -64          -65          -66          -67        -68           -69           -70           -71           -72          -73            -74         -75         -76           -77            -78             -79        -80          -81              -82           -83        -84             -85           -86            -87            -88               -89        -90           -91            -92            -93            -94              -95              -96               -97           -98               -99            -100            -101          -102       -103        -104         -105         -106            -107            -108              -109             -110         -111            -112        -113       -120            
            /* 0s            */{    -600     ,      -600     ,    -600   ,     -600    ,    -600     ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,      -600     ,      -600     ,     -600      ,     -600      ,     -600      ,     -600      ,      -600     ,     -600      ,    -600       ,     -600      ,    -600       ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,      -600     ,      -600     ,      -600     ,      -600     ,     -600      ,      -600     ,        1      ,   -600    ,    -600   ,      -600     ,    -600   ,   -600    ,   -600    ,     -600      ,   -600    ,     -600      ,    -600       ,     -600      ,    -600   ,    -600   ,      -600     ,      1        ,      -600     ,    -600       ,      -600     ,      -600     ,      -600     ,   -600    ,     -600      ,    -600   ,    -600   ,      -600     ,   -600    ,   -600    ,    -600   ,     1     ,      -600     ,   -600    ,     -600      ,    -600   ,     -600      ,    -600   ,   -600    ,   -600    ,      -600     ,     -600      ,    -600   ,    -600   ,    -600       ,     -600      ,    -600   ,   -600    ,      -600     ,     -600      ,   -600    ,       -600        ,     -600  ,    -600   ,     -600      ,     -600      ,    -600   ,       -600    ,        -600       ,     -600      ,      -600     ,    -600       ,      -600     ,      -600       ,    -600     ,    -600   ,   -600    ,   -600    ,    -600    ,    -600      ,     -600      ,     -600      ,       -600        ,      1    ,       1       ,       1      ,  -600   ,   -600   ,  -600 ,     -600     },
            /* 1programa     */{    -600     ,      -600     ,    -600   ,     -600    ,    -600     ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,      -600     ,      -600     ,     -600      ,     -600      ,     -600      ,     -600      ,      -600     ,     -600      ,    -600       ,     -600      ,    -600       ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,     -600      ,      -600     ,      -600     ,      -600     ,      -600     ,     -600      ,      -600     ,        2      ,   -600    ,    -600   ,      -600     ,    -600   ,   -600    ,   -600    ,     -600      ,   -600    ,     -600      ,    -600       ,     -600      ,    -600   ,    -600   ,      -600     ,      2        ,      -600     ,    -600       ,      -600     ,      -600     ,      -600     ,   -600    ,     -600      ,    -600   ,    -600   ,      -600     ,   -600    ,   -600    ,    -600   ,     2     ,      -600     ,   -600    ,     -600      ,    -600   ,     -600      ,    -600   ,   -600    ,   -600    ,      -600     ,     -600      ,    -600   ,    -600   ,    -600       ,     -600      ,    -600   ,   -600    ,      -600     ,     -600      ,   -600    ,       -600        ,     -600  ,    -600   ,     -600      ,     -600      ,    -600   ,       -600    ,        -600       ,     -600      ,      -600     ,    -600       ,      -600     ,      -600       ,    -600     ,    -600   ,   -600    ,   -600    ,    -600    ,    -600      ,     -600      ,     -600      ,       -600        ,      2    ,       2       ,       2      ,  -600   ,   -600   ,    3  ,     -600     },
            /* 2librerias    */{    -601     ,      -601     ,    -601   ,     -601    ,    -601     ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,      -601     ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,     -601      ,    -601       ,     -601      ,    -601       ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,      -601     ,      -601     ,      -601     ,     -601      ,      -601     ,        7      ,   -601    ,    -601   ,      -601     ,    -601   ,   -601    ,   -601    ,     -601      ,   -601    ,     -601      ,    -601       ,     -601      ,    -601   ,    -601   ,      -601     ,      4        ,      -601     ,    -601       ,      -601     ,      -601     ,      -601     ,   -601    ,     -601      ,    -601   ,    -601   ,      -601     ,   -601    ,   -601    ,    -601   ,     7     ,      -601     ,   -601    ,     -601      ,    -601   ,     -601      ,    -601   ,   -601    ,   -601    ,      -601     ,     -601      ,    -601   ,    -601   ,    -601       ,     -601      ,    -601   ,   -601    ,      -601     ,     -601      ,   -601    ,       -601        ,     -601  ,    -601   ,     -601      ,     -601      ,    -601   ,       -601    ,        -601       ,     -601      ,      -601     ,    -601       ,      -601     ,      -601       ,    -601     ,    -601   ,   -601    ,   -601    ,    -601    ,    -601      ,     -601      ,     -601      ,       -601        ,       7   ,       7       ,       7      ,  -601   ,   -601   ,    3  ,     -600     },
            /* 3liberia      */{    -601     ,      -601     ,    -601   ,     -601    ,    -601     ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,      -601     ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,     -601      ,    -601       ,     -601      ,    -601       ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,      -601     ,      -601     ,      -601     ,     -601      ,      -601     ,      -601     ,   -601    ,    -601   ,      -601     ,    -601   ,   -601    ,   -601    ,     -601      ,   -601    ,     -601      ,    -601       ,     -601      ,    -601   ,    -601   ,      -601     ,      5        ,      -601     ,    -601       ,      -601     ,      -601     ,      -601     ,   -601    ,     -601      ,    -601   ,    -601   ,      -601     ,   -601    ,   -601    ,    -601   ,    -601   ,      -601     ,   -601    ,     -601      ,    -601   ,     -601      ,    -601   ,   -601    ,   -601    ,      -601     ,     -601      ,    -601   ,    -601   ,    -601       ,     -601      ,    -601   ,   -601    ,      -601     ,     -601      ,   -601    ,       -601        ,     -601  ,    -601   ,     -601      ,     -601      ,    -601   ,       -601    ,        -601       ,     -601      ,      -601     ,    -601       ,      -601     ,      -601       ,    -601     ,    -601   ,   -601    ,   -601    ,    -601    ,    -601      ,     -601      ,     -601      ,       -601        ,    -601   ,     -601      ,      -601    ,  -601   ,   -601   ,    3  ,     -600     },
            /* 4lib          */{    -601     ,      -601     ,    -601   ,       6     ,    -601     ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,      -601     ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,     -601      ,    -601       ,     -601      ,    -601       ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,     -601      ,      -601     ,      -601     ,      -601     ,      -601     ,     -601      ,      -601     ,      -601     ,   -601    ,    -601   ,      -601     ,    -601   ,   -601    ,   -601    ,     -601      ,   -601    ,     -601      ,    -601       ,     -601      ,    -601   ,    -601   ,      -601     ,     -601      ,      -601     ,    -601       ,      -601     ,      -601     ,      -601     ,   -601    ,     -601      ,    -601   ,    -601   ,      -601     ,   -601    ,   -601    ,    -601   ,    -601   ,      -601     ,   -601    ,     -601      ,    -601   ,     -601      ,    -601   ,   -601    ,   -601    ,      -601     ,     -601      ,    -601   ,    -601   ,    -601       ,     -601      ,    -601   ,   -601    ,      -601     ,     -601      ,   -601    ,       -601        ,     -601  ,    -601   ,     -601      ,     -601      ,    -601   ,       -601    ,        -601       ,     -601      ,      -601     ,    -601       ,      -601     ,      -601       ,    -601     ,    -601   ,   -601    ,   -601    ,    -601    ,    -601      ,     -601      ,     -601      ,       -601        ,    -601   ,     -601      ,      -601    ,  -601   ,   -601   ,  -601 ,     -600     },
            /* 5clases       */{    -604     ,      -604     ,    -604   ,     -604    ,    -604     ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,      -604     ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,     -604      ,    -604       ,     -604      ,    -604       ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,      -604     ,      -604     ,      -604     ,     -604      ,      -604     ,        7      ,   -604    ,    -604   ,      -604     ,    -604   ,   -604    ,   -604    ,     -604      ,   -604    ,     -604      ,    -604       ,     -604      ,    -604   ,    -604   ,      -604     ,     -604      ,      -604     ,    -604       ,      -604     ,      -604     ,      -604     ,   -604    ,     -604      ,    -604   ,    -604   ,      -604     ,   -604    ,   -604    ,    -604   ,     7     ,      -604     ,   -604    ,     -604      ,    -604   ,     -604      ,    -604   ,   -604    ,   -604    ,      -604     ,     -604      ,    -604   ,    -604   ,    -604       ,     -604      ,    -604   ,   -604    ,      -604     ,     -604      ,   -604    ,       -604        ,     -604  ,    -604   ,     -604      ,     -604      ,    -604   ,       -604    ,        -604       ,     -604      ,      -604     ,    -604       ,      -604     ,      -604       ,    -604     ,    -604   ,   -604    ,   -604    ,    -604    ,    -604      ,     -604      ,     -604      ,       -604        ,      7    ,      7        ,       7      ,  -604   ,   -604   ,    8  ,     -600     },
            /* 6clases1      */{    -604     ,      -604     ,    -604   ,     -604    ,    -604     ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,      -604     ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,     -604      ,    -604       ,     -604      ,    -604       ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,      -604     ,      -604     ,      -604     ,     -604      ,      -604     ,        7      ,   -604    ,    -604   ,      -604     ,    -604   ,   -604    ,   -604    ,     -604      ,   -604    ,     -604      ,    -604       ,     -604      ,    -604   ,    -604   ,      -604     ,     -604      ,      -604     ,    -604       ,      -604     ,      -604     ,      -604     ,   -604    ,     -604      ,    -604   ,    -604   ,      -604     ,   -604    ,   -604    ,    -604   ,     7     ,      -604     ,   -604    ,     -604      ,    -604   ,     -604      ,    -604   ,   -604    ,   -604    ,      -604     ,     -604      ,    -604   ,    -604   ,    -604       ,     -604      ,    -604   ,   -604    ,      -604     ,     -604      ,   -604    ,       -604        ,     -604  ,    -604   ,     -604      ,     -604      ,    -604   ,       -604    ,        -604       ,     -604      ,      -604     ,    -604       ,      -604     ,      -604       ,    -604     ,    -604   ,   -604    ,   -604    ,    -604    ,    -604      ,     -604      ,     -604      ,       -604        ,      7    ,      7        ,       7      ,  -604   ,   -604   ,    8  ,     -600     },
            /* 7clase        */{    -604     ,      -604     ,    -604   ,     -604    ,    -604     ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,      -604     ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,     -604      ,    -604       ,     -604      ,    -604       ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,     -604      ,      -604     ,      -604     ,      -604     ,      -604     ,     -604      ,      -604     ,       10      ,   -604    ,    -604   ,      -604     ,    -604   ,   -604    ,   -604    ,     -604      ,   -604    ,     -604      ,    -604       ,     -604      ,    -604   ,    -604   ,      -604     ,     -604      ,      -604     ,    -604       ,      -604     ,      -604     ,      -604     ,   -604    ,     -604      ,    -604   ,    -604   ,      -604     ,   -604    ,   -604    ,    -604   ,     10    ,      -604     ,   -604    ,     -604      ,    -604   ,     -604      ,    -604   ,   -604    ,   -604    ,      -604     ,     -604      ,    -604   ,    -604   ,    -604       ,     -604      ,    -604   ,   -604    ,      -604     ,     -604      ,   -604    ,       -604        ,     -604  ,    -604   ,     -604      ,     -604      ,    -604   ,       -604    ,        -604       ,     -604      ,      -604     ,    -604       ,      -604     ,      -604       ,    -604     ,    -604   ,   -604    ,   -604    ,    -604    ,    -604      ,     -604      ,     -604      ,       -604        ,     10    ,      10       ,       10     ,  -604   ,   -604   ,  -604 ,     -600     },
            /* 8alcance     */{    -605     ,      -605     ,    -605   ,     -605    ,    -605     ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,      -605     ,      -605     ,     -605      ,     -605      ,     -605      ,     -605      ,      -605     ,     -605      ,    -605       ,     -605      ,    -605       ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,     -605      ,      -605     ,      -605     ,      -605     ,      -605     ,     -605      ,      -605     ,       114     ,   -605    ,    -605   ,      -605     ,    -605   ,   -605    ,   -605    ,     -605      ,   -605    ,     -605      ,    -605       ,     -605      ,    -605   ,    -605   ,      -605     ,     -605      ,      -605     ,    -605       ,      -605     ,      -605     ,      -605     ,   -605    ,     -605      ,    -605   ,    -605   ,      -605     ,   -605    ,   -605    ,    -605   ,     14    ,      -605     ,   -605    ,     -605      ,    -605   ,     -605      ,    -605   ,   -605    ,   -605    ,      -605     ,     -605      ,    -605   ,    -605   ,    -605       ,     -605      ,    -605   ,   -605    ,      -605     ,     -605      ,   -605    ,       -605        ,     -605  ,    -605   ,     -605      ,     -605      ,    -605   ,       -605    ,        -605       ,     -605      ,      -605     ,    -605       ,      -605     ,      -605       ,    -605     ,    -605   ,   -605    ,   -605    ,    -605    ,    -605      ,     -605      ,     -605      ,       -605        ,     11    ,      12       ,       13     ,  -605   ,   -605   ,  -605 ,     -600     },
            /* 9herencia    */{    -602     ,      -602     ,    -602   ,     -602    ,    -602     ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,      -602     ,      -602     ,     -602      ,     -602      ,     -602      ,     -602      ,      -602     ,     -602      ,    -602       ,      15       ,    -602       ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,     -602      ,      -602     ,      -602     ,      -602     ,      -602     ,     -602      ,      -602     ,      -602     ,   -602    ,    -602   ,      -602     ,    -602   ,   -602    ,   -602    ,     -602      ,   -602    ,     -602      ,    -602       ,      16       ,    -602   ,    -602   ,      -602     ,     -602      ,      -602     ,    -602       ,      -602     ,      -602     ,      -602     ,   -602    ,     -602      ,    -602   ,    -602   ,      -602     ,   -602    ,   -602    ,    -602   ,    -602   ,      -602     ,   -602    ,     -602      ,    -602   ,     -602      ,    -602   ,   -602    ,   -602    ,      -602     ,     -602      ,    -602   ,    -602   ,    -602       ,     -602      ,    -602   ,   -602    ,      -602     ,     -602      ,   -602    ,       -602        ,     -602  ,    -602   ,     -602      ,     -602      ,    -602   ,       -602    ,        -602       ,     -602      ,      -602     ,    -602       ,      -602     ,      -602       ,    -602     ,    -602   ,   -602    ,   -602    ,    -602    ,    -602      ,     -602      ,     -602      ,       -602        ,    -602   ,     -602      ,      -602    ,  -602   ,   -602   ,  -602 ,     -600     },
            /* 10miembros   */{     19      ,      -603     ,    -603   ,     -603    ,    -603     ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,      -603     ,      -603     ,     -603      ,     -603      ,     -603      ,     -603      ,      -603     ,     -603      ,    -603       ,     -603      ,     17        ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,      -603     ,      -603     ,      -603     ,      -603     ,     -603      ,      -603     ,       18      ,   -603    ,    -603   ,      -603     ,    -603   ,   -603    ,   -603    ,      18       ,   -603    ,     -603      ,    -603       ,     -603      ,    -603   ,    -603   ,      -603     ,     -603      ,      -603     ,    -603       ,      -603     ,      -603     ,      -603     ,   -603    ,     -603      ,    -603   ,    -603   ,      -603     ,   -603    ,   -603    ,    -603   ,    -603   ,      -603     ,   -603    ,     -603      ,    -603   ,     -603      ,    -603   ,   -603    ,   -603    ,      -603     ,     -603      ,    -603   ,    -603   ,    -603       ,     -603      ,    -603   ,   -603    ,      -603     ,     -603      ,   -603    ,       -603        ,     -603  ,    -603   ,     -603      ,     -603      ,    -603   ,        18     ,         18        ,     -603      ,      -603     ,    -603       ,       18      ,       18        ,    -603     ,     18    ,    18     ,   -603    ,    -603    ,    -603      ,     -603      ,     -603      ,       -603        ,     18    ,      18       ,       18     ,  -603   ,   -603   ,  -603 ,      18      },
            /* 11miembro      */{     20      ,      -603     ,    -603   ,     -603    ,    -603     ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,      -603     ,      -603     ,     -603      ,     -603      ,     -603      ,     -603      ,      -603     ,     -603      ,    -603       ,     -603      ,    -603       ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,     -603      ,      -603     ,      -603     ,      -603     ,      -603     ,     -603      ,      -603     ,       19      ,   -603    ,    -603   ,      -603     ,    -603   ,   -603    ,   -603    ,      19       ,   -603    ,     -603      ,    -603       ,     -603      ,    -603   ,    -603   ,      -603     ,     -603      ,      -603     ,    -603       ,      -603     ,      -603     ,      -603     ,   -603    ,     -603      ,    -603   ,    -603   ,      -603     ,   -603    ,   -603    ,    -603   ,    -603   ,      -603     ,   -603    ,     -603      ,    -603   ,     -603      ,    -603   ,   -603    ,   -603    ,      -603     ,     -603      ,    -603   ,    -603   ,    -603       ,     -603      ,    -603   ,   -603    ,      -603     ,     -603      ,   -603    ,       -603        ,     -603  ,    -603   ,     -603      ,     -603      ,    -603   ,        19     ,         19        ,     -603      ,      -603     ,    -603       ,       19      ,       19        ,    -603     ,     19    ,    19     ,   -603    ,    -603    ,    -603      ,     -603      ,     -603      ,       -603        ,     19    ,      19       ,       19     ,  -603   ,   -603   ,  -603 ,      19      },
            /* 12metratricon  */{     22      ,      -606     ,    -606   ,     -606    ,    -606     ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      -606     ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,     -606      ,    -606       ,     -606      ,    -606       ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      -606     ,      -606     ,      -606     ,     -606      ,      -606     ,       20      ,   -606    ,    -606   ,      -606     ,    -606   ,   -606    ,   -606    ,      23       ,   -606    ,     -606      ,    -606       ,     -606      ,    -606   ,    -606   ,      -606     ,     -606      ,      -606     ,    -606       ,      -606     ,      -606     ,      -606     ,   -606    ,     -606      ,    -606   ,    -606   ,      -606     ,   -606    ,   -606    ,    -606   ,    -606   ,      -606     ,   -606    ,     -606      ,    -606   ,     -606      ,    -606   ,   -606    ,   -606    ,      -606     ,     -606      ,    -606   ,    -606   ,    -606       ,     -606      ,    -606   ,   -606    ,      -606     ,     -606      ,   -606    ,       -606        ,     -606  ,    -606   ,     -606      ,     -606      ,    -606   ,        23     ,         21        ,     -606      ,      -606     ,    -606       ,       23      ,       23        ,    -606     ,     23    ,    23     ,   -606    ,    -606    ,    -606      ,     -606      ,     -606      ,       -606        ,     20    ,      20       ,       20     ,  -606   ,   -606   ,  -606 ,      23      },
            /* 13metratricon1 */{     22      ,      -606     ,    -606   ,     -606    ,    -606     ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      -606     ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,     -606      ,    -606       ,     -606      ,    -606       ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      -606     ,      -606     ,      -606     ,     -606      ,      -606     ,      -606     ,   -606    ,    -606   ,      -606     ,    -606   ,   -606    ,   -606    ,      23       ,   -606    ,     -606      ,    -606       ,     -606      ,    -606   ,    -606   ,      -606     ,     -606      ,      -606     ,    -606       ,      -606     ,      -606     ,      -606     ,   -606    ,     -606      ,    -606   ,    -606   ,      -606     ,   -606    ,   -606    ,    -606   ,    -606   ,      -606     ,   -606    ,     -606      ,    -606   ,     -606      ,    -606   ,   -606    ,   -606    ,      -606     ,     -606      ,    -606   ,    -606   ,    -606       ,     -606      ,    -606   ,   -606    ,      -606     ,     -606      ,   -606    ,       -606        ,     -606  ,    -606   ,     -606      ,     -606      ,    -606   ,        23     ,         21        ,     -606      ,      -606     ,    -606       ,       23      ,       23        ,    -606     ,     23    ,    23     ,   -606    ,    -606    ,    -606      ,     -606      ,     -606      ,       -606        ,    -606   ,     -606      ,      -606    ,  -606   ,   -606   ,  -606 ,      23      },
            /* 14metratricon2 */{    -606     ,      -606     ,    -606   ,     -606    ,    -606     ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      -606     ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      24       ,    -606       ,     -606      ,    -606       ,     -606      ,     -606      ,     -606      ,      25       ,     -606      ,     -606      ,     -606      ,     -606      ,      -606     ,      -606     ,      -606     ,      -606     ,     -606      ,      -606     ,      -606     ,   -606    ,    -606   ,      -606     ,    -606   ,   -606    ,   -606    ,     -606      ,   -606    ,     -606      ,    -606       ,     -606      ,    -606   ,    -606   ,      -606     ,     -606      ,      -606     ,    -606       ,      -606     ,      -606     ,      -606     ,   -606    ,     -606      ,    -606   ,    -606   ,      -606     ,   -606    ,   -606    ,    -606   ,    -606   ,      -606     ,   -606    ,     -606      ,    -606   ,     -606      ,    -606   ,   -606    ,   -606    ,      -606     ,     -606      ,    -606   ,    -606   ,    -606       ,     -606      ,    -606   ,   -606    ,      -606     ,     -606      ,   -606    ,       -606        ,     -606  ,    -606   ,     -606      ,     -606      ,    -606   ,       -606    ,        -606       ,     -606      ,      -606     ,    -606       ,      -606     ,      -606       ,    -606     ,    -606   ,   -606    ,   -606    ,    -606    ,    -606      ,      25       ,     -606      ,       -606        ,    -606   ,     -606      ,      -606    ,  -606   ,   -606   ,  -606 ,     -600     },
            /* 15asignacion   */{    -607     ,      -607     ,    -607   ,     -607    ,    -607     ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,      -607     ,      -607     ,     -607      ,     -607      ,     -607      ,     -607      ,      -607     ,     -607      ,    -607       ,     -607      ,    -607       ,     -607      ,     -607      ,     -607      ,      26       ,     -607      ,     -607      ,     -607      ,     -607      ,      -607     ,      -607     ,       27      ,       27      ,      27       ,       27      ,      -607     ,   -607    ,    -607   ,      -607     ,    -607   ,   -607    ,   -607    ,     -607      ,   -607    ,     -607      ,    -607       ,     -607      ,    -607   ,    -607   ,      -607     ,     -607      ,      -607     ,    -607       ,      -607     ,      -607     ,      -607     ,   -607    ,     -607      ,    -607   ,    -607   ,      -607     ,   -607    ,   -607    ,    -607   ,    -607   ,      -607     ,   -607    ,     -607      ,    -607   ,     -607      ,    -607   ,   -607    ,   -607    ,      -607     ,     -607      ,    -607   ,    -607   ,    -607       ,     -607      ,    -607   ,   -607    ,      -607     ,     -607      ,   -607    ,       -607        ,     -607  ,    -607   ,     -607      ,     -607      ,    -607   ,       -607    ,        -607       ,     -607      ,      -607     ,    -607       ,      -607     ,      -607       ,    -607     ,    -607   ,   -607    ,   -607    ,    -607    ,    -607      ,      27       ,     -607      ,       -607        ,    -607   ,     -607      ,      -607    ,  -607   ,   -607   ,  -607 ,     -600     },
            /* 16tipo         */{    -608     ,      -608     ,    -608   ,     -608    ,    -608     ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,      -608     ,      -608     ,     -608      ,     -608      ,     -608      ,     -608      ,      -608     ,     -608      ,    -608       ,     -608      ,    -608       ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,     -608      ,      -608     ,      -608     ,      -608     ,      -608     ,     -608      ,      -608     ,      -608     ,   -608    ,    -608   ,      -608     ,    -608   ,   -608    ,   -608    ,      31       ,   -608    ,     -608      ,    -608       ,     -608      ,    -608   ,    -608   ,      -608     ,     -608      ,      -608     ,    -608       ,      -608     ,      -608     ,      -608     ,   -608    ,     -608      ,    -608   ,    -608   ,      -608     ,   -608    ,   -608    ,    -608   ,    -608   ,      -608     ,   -608    ,     -608      ,    -608   ,     -608      ,    -608   ,   -608    ,   -608    ,      -608     ,     -608      ,    -608   ,    -608   ,    -608       ,     -608      ,    -608   ,   -608    ,      -608     ,     -608      ,   -608    ,       -608        ,     -608  ,    -608   ,     -608      ,     -608      ,    -608   ,        33     ,        -608       ,     -608      ,      -608     ,    -608       ,       28      ,       30        ,    -608     ,     29    ,    32     ,   -608    ,    -608    ,    -608      ,     -608      ,     -608      ,       -608        ,    -608   ,     -608      ,      -608    ,  -608   ,   -608   ,  -608 ,      113     },
            /* 17parametros   */{    -609     ,      -609     ,    -609   ,     -609    ,    -609     ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,      -609     ,      -609     ,     -609      ,     -609      ,     -609      ,     -609      ,      -609     ,     -609      ,     34        ,     -609      ,    -609       ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,      -609     ,      -609     ,      -609     ,      -609     ,     -609      ,      -609     ,      -609     ,   -609    ,    -609   ,      -609     ,    -609   ,   -609    ,   -609    ,      35       ,   -609    ,     -609      ,    -609       ,     -609      ,    -609   ,    -609   ,      -609     ,     -609      ,      -609     ,    -609       ,      -609     ,      -609     ,      -609     ,   -609    ,     -609      ,    -609   ,    -609   ,      -609     ,   -609    ,   -609    ,    -609   ,    -609   ,      -609     ,   -609    ,     -609      ,    -609   ,     -609      ,    -609   ,   -609    ,   -609    ,      -609     ,     -609      ,    -609   ,    -609   ,    -609       ,     -609      ,    -609   ,   -609    ,      -609     ,     -609      ,   -609    ,       -609        ,     -609  ,    -609   ,     -609      ,     -609      ,    -609   ,        35     ,        -609       ,     -609      ,      -609     ,    -609       ,       35      ,       35        ,    -609     ,     35    ,    35     ,   -609    ,    -609    ,    -609      ,     -609      ,     -609      ,       -609        ,    -609   ,     -609      ,      -609    ,  -609   ,   -609   ,  -609 ,      35      },
            /* 18parametros1  */{    -609     ,      -609     ,    -609   ,     -609    ,    -609     ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,      -609     ,      -609     ,     -609      ,     -609      ,     -609      ,     -609      ,      -609     ,     -609      ,     37        ,     -609      ,    -609       ,     -609      ,     -609      ,      36       ,     -609      ,     -609      ,     -609      ,     -609      ,     -609      ,      -609     ,      -609     ,      -609     ,      -609     ,     -609      ,      -609     ,      -609     ,   -609    ,    -609   ,      -609     ,    -609   ,   -609    ,   -609    ,     -609      ,   -609    ,     -609      ,    -609       ,     -609      ,    -609   ,    -609   ,      -609     ,     -609      ,      -609     ,    -609       ,      -609     ,      -609     ,      -609     ,   -609    ,     -609      ,    -609   ,    -609   ,      -609     ,   -609    ,   -609    ,    -609   ,    -609   ,      -609     ,   -609    ,     -609      ,    -609   ,     -609      ,    -609   ,   -609    ,   -609    ,      -609     ,     -609      ,    -609   ,    -609   ,    -609       ,     -609      ,    -609   ,   -609    ,      -609     ,     -609      ,   -609    ,       -609        ,     -609  ,    -609   ,     -609      ,     -609      ,    -609   ,       -609    ,        -609       ,     -609      ,      -609     ,    -609       ,      -609     ,      -609       ,    -609     ,    -609   ,   -609    ,   -609    ,    -609    ,    -609      ,     -609      ,     -609      ,       -609        ,    -609   ,     -609      ,      -609    ,  -609   ,   -609   ,  -609 ,     -609     },
            /* 19expresion    */{    38       ,       38      ,     38    ,      38     ,    -610     ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,      -610     ,      -610     ,     -610      ,     -610      ,     -610      ,     -610      ,      -610     ,     -610      ,    -610       ,     -610      ,    -610       ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,     -610      ,      -610     ,      -610     ,      -610     ,      -610     ,     -610      ,      -610     ,      -610     ,   -610    ,    -610   ,      -610     ,    -610   ,   -610    ,   -610    ,     -610      ,   -610    ,     -610      ,    -610       ,     -610      ,    -610   ,    -610   ,      -610     ,     -610      ,      -610     ,    -610       ,      -610     ,      -610     ,      -610     ,   -610    ,     -610      ,    -610   ,    -610   ,      -610     ,   -610    ,   -610    ,    -610   ,    -610   ,      -610     ,   -610    ,     -610      ,    -610   ,     -610      ,    -610   ,   -610    ,   -610    ,      -610     ,     -610      ,    -610   ,    -610   ,    -610       ,     -610      ,    -610   ,   -610    ,      -610     ,     -610      ,   -610    ,       -610        ,     -610  ,    -610   ,     -610      ,     -610      ,    -610   ,       -610    ,        -610       ,     -610      ,      -610     ,    -610       ,      -610     ,      -610       ,    -610     ,    -610   ,   -610    ,   -610    ,    -610    ,    -610      ,     -610      ,     -610      ,       -610        ,    -610   ,     -610      ,      -610    ,   38    ,   -610   ,  -610 ,     -600     },
            /* 20factor       */{    39       ,       40      ,     41    ,      42     ,    -611     ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,      -611     ,      -611     ,     -611      ,     -611      ,     -611      ,     -611      ,      -611     ,     -611      ,    -611       ,     -611      ,    -611       ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,     -611      ,      -611     ,      -611     ,      -611     ,      -611     ,     -611      ,      -611     ,      -611     ,   -611    ,    -611   ,      -611     ,    -611   ,   -611    ,   -611    ,     -611      ,   -611    ,     -611      ,    -611       ,     -611      ,    -611   ,    -611   ,      -611     ,     -611      ,      -611     ,    -611       ,      -611     ,      -611     ,      -611     ,   -611    ,     -611      ,    -611   ,    -611   ,      -611     ,   -611    ,   -611    ,    -611   ,    -611   ,      -611     ,   -611    ,     -611      ,    -611   ,     -611      ,    -611   ,   -611    ,   -611    ,      -611     ,     -611      ,    -611   ,    -611   ,    -611       ,     -611      ,    -611   ,   -611    ,      -611     ,     -611      ,   -611    ,       -611        ,     -611  ,    -611   ,     -611      ,     -611      ,    -611   ,       -611    ,        -611       ,     -611      ,      -611     ,    -611       ,      -611     ,      -611       ,    -611     ,    -611   ,   -611    ,   -611    ,    -611    ,    -611      ,     -611      ,     -611      ,       -611        ,    -611   ,     -611      ,      -611    ,  96     ,   -611   ,  -611 ,     -600     },
            /* 21termino      */{    -612     ,      -612     ,    -612   ,     -612    ,    -612     ,      44       ,      44       ,      44       ,      44       ,     -612      ,      43       ,      43       ,       43      ,       43      ,      43       ,      43       ,      43       ,      43       ,       43      ,     -612      ,     43        ,     -612      ,    -612       ,     -612      ,     -612      ,      44       ,      43       ,     -612      ,     -612      ,     -612      ,     -612      ,      -612     ,      -612     ,      -612     ,      -612     ,     -612      ,      -612     ,      -612     ,   -612    ,    -612   ,      -612     ,    -612   ,   -612    ,   -612    ,     -612      ,   -612    ,     -612      ,    -612       ,     -612      ,    -612   ,    -612   ,      -612     ,     -612      ,      -612     ,    -612       ,      -612     ,      -612     ,      -612     ,   -612    ,     -612      ,    -612   ,    -612   ,      -612     ,   -612    ,   -612    ,    -612   ,    -612   ,      -612     ,   -612    ,     -612      ,    -612   ,     -612      ,    -612   ,   -612    ,   -612    ,      -612     ,     -612      ,    -612   ,    -612   ,    -612       ,     -612      ,    -612   ,   -612    ,      -612     ,     -612      ,   -612    ,       -612        ,     -612  ,    -612   ,     -612      ,     -612      ,    -612   ,       -612    ,        -612       ,     -612      ,      -612     ,    -612       ,      -612     ,      -612       ,    -612     ,    -612   ,   -612    ,   -612    ,    -612    ,    -612      ,      44       ,     -612      ,       -612        ,    -612   ,     -612      ,      -612    ,  -612   ,   -612   ,  -612 ,     -600     },
            /* 22operarit     */{    -613     ,      -613     ,    -613   ,     -613    ,    -613     ,      45       ,      46       ,      47       ,      48       ,     -613      ,     -613      ,     -613      ,      -613     ,      -613     ,     -613      ,     -613      ,     -613      ,     -613      ,      -613     ,     -613      ,    -613       ,     -613      ,    -613       ,     -613      ,     -613      ,      112      ,     -613      ,     -613      ,     -613      ,     -613      ,     -613      ,      -613     ,      -613     ,      -613     ,      -613     ,     -613      ,      -613     ,      -613     ,   -613    ,    -613   ,      -613     ,    -613   ,   -613    ,   -613    ,     -613      ,   -613    ,     -613      ,    -613       ,     -613      ,    -613   ,    -613   ,      -613     ,     -613      ,      -613     ,    -613       ,      -613     ,      -613     ,      -613     ,   -613    ,     -613      ,    -613   ,    -613   ,      -613     ,   -613    ,   -613    ,    -613   ,    -613   ,      -613     ,   -613    ,     -613      ,    -613   ,     -613      ,    -613   ,   -613    ,   -613    ,      -613     ,     -613      ,    -613   ,    -613   ,    -613       ,     -613      ,    -613   ,   -613    ,      -613     ,     -613      ,   -613    ,       -613        ,     -613  ,    -613   ,     -613      ,     -613      ,    -613   ,       -613    ,        -613       ,     -613      ,      -613     ,    -613       ,      -613     ,      -613       ,    -613     ,    -613   ,   -613    ,   -613    ,    -613    ,    -613      ,      117      ,     -613      ,       -613        ,    -613   ,     -613      ,      -613    ,  -613   ,   -613   ,  -613 ,     -600     },
            /* 23sentencias   */{    49       ,      -614     ,    -614   ,     -614    ,    -614     ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,      -614     ,      -614     ,     -614      ,     -614      ,     -614      ,     -614      ,      -614     ,     -614      ,    -614       ,     -614      ,     50        ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,      -614     ,      -614     ,      -614     ,      -614     ,     -614      ,      -614     ,      -614     ,   -614    ,    -614   ,      -614     ,    -614   ,    50     ,   -614    ,      49       ,   -614    ,     -614      ,    -614       ,     -614      ,    -614   ,    -614   ,      -614     ,     -614      ,      -614     ,    -614       ,      -614     ,      -614     ,      -614     ,   -614    ,     -614      ,    -614   ,     49    ,      -614     ,   -614    ,   -614    ,    -614   ,    -614   ,      -614     ,   -614    ,     -614      ,    -614   ,     -614      ,     49    ,   -614    ,   -614    ,      -614     ,      49       ,    -614   ,    -614   ,    -614       ,      49       ,    -614   ,   -614    ,      -614     ,     -614      ,   -614    ,       -614        ,      50   ,    -614   ,     -614      ,     -614      ,    -614   ,        49     ,        -614       ,      49       ,      -614     ,    -614       ,       49      ,       49        ,    -614     ,     49    ,    49     ,   -614    ,    -614    ,     49       ,      117      ,     -614      ,       -614        ,    -614   ,     -614      ,      -614    ,   49    ,   -614   ,  -614 ,     -600     },
            /* 24si           */{    -615     ,      -615     ,    -615   ,     -615    ,    -615     ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,      -615     ,      -615     ,     -615      ,     -615      ,     -615      ,     -615      ,      -615     ,     -615      ,    -615       ,     -615      ,    -615       ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,     -615      ,      -615     ,      -615     ,      -615     ,      -615     ,     -615      ,      -615     ,      -615     ,   -615    ,    -615   ,      -615     ,    -615   ,   -615    ,   -615    ,     -615      ,   -615    ,     -615      ,    -615       ,     -615      ,    -615   ,    -615   ,      -615     ,     -615      ,      -615     ,    -615       ,      -615     ,      -615     ,      -615     ,   -615    ,     -615      ,    -615   ,    -615   ,      -615     ,   -615    ,   -615    ,    -615   ,    -615   ,      -615     ,   -615    ,     -615      ,    -615   ,     -615      ,    -615   ,   -615    ,   -615    ,      -615     ,     -615      ,    -615   ,    -615   ,    -615       ,      60       ,    -615   ,   -615    ,      -615     ,     -615      ,   -615    ,       -615        ,     -615  ,    -615   ,     -615      ,     -615      ,    -615   ,       -615    ,        -615       ,     -615      ,      -615     ,    -615       ,      -615     ,      -615       ,    -615     ,    -615   ,   -615    ,   -615    ,    -615    ,    -615      ,     -615      ,     -615      ,       -615        ,    -615   ,     -615      ,      -615    ,  -615   ,   -615   ,  -615 ,     -600     },
            /* 25condicional  */{    61       ,       61      ,     61    ,      61     ,    -616     ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,      -616     ,      -616     ,     -616      ,     -616      ,     -616      ,     -616      ,      -616     ,     -616      ,    -616       ,     -616      ,    -616       ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,     -616      ,      -616     ,      -616     ,      -616     ,      -616     ,     -616      ,      -616     ,      -616     ,   -616    ,    -616   ,      -616     ,    -616   ,   -616    ,   -616    ,     -616      ,   -616    ,     -616      ,    -616       ,     -616      ,    -616   ,    -616   ,      -616     ,     -616      ,      -616     ,    -616       ,      -616     ,      -616     ,      -616     ,   -616    ,     -616      ,    -616   ,    -616   ,      -616     ,   -616    ,   -616    ,    -616   ,    -616   ,      -616     ,   -616    ,     -616      ,    -616   ,     -616      ,    -616   ,    61     ,   -616    ,      -616     ,     -616      ,    -616   ,    -616   ,    -616       ,     -616      ,    -616   ,   -616    ,      -616     ,     -616      ,   -616    ,       -616        ,     -616  ,    -616   ,      61       ,     -616      ,    -616   ,       -616    ,        -616       ,     -616      ,      -616     ,    -616       ,      -616     ,      -616       ,    -616     ,    -616   ,   -616    ,   -616    ,    -616    ,    -616      ,     -616      ,     -616      ,       -616        ,    -616   ,     -616      ,      -616    ,  -616   ,   -616   ,  -616 ,     -600     },
            /* factorCond   */{    64       ,       64      ,     64    ,      64     ,    -617     ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,      -617     ,      -617     ,     -617      ,     -617      ,     -617      ,     -617      ,      -617     ,     -617      ,    -617       ,     -617      ,    -617       ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,     -617      ,      -617     ,      -617     ,      -617     ,      -617     ,     -617      ,      -617     ,      -617     ,   -617    ,    -617   ,      -617     ,    -617   ,   -617    ,   -617    ,     -617      ,   -617    ,     -617      ,    -617       ,     -617      ,    -617   ,    -617   ,      -617     ,     -617      ,      -617     ,    -617       ,      -617     ,      -617     ,      -617     ,   -617    ,     -617      ,    -617   ,    -617   ,      -617     ,   -617    ,   -617    ,    -617   ,    -617   ,      -617     ,   -617    ,     -617      ,    -617   ,     -617      ,    -617   ,    63     ,   -617    ,      -617     ,     -617      ,    -617   ,    -617   ,    -617       ,     -617      ,    -617   ,   -617    ,      -617     ,     -617      ,   -617    ,       -617        ,     -617  ,    -617   ,      62       ,     -617      ,    -617   ,       -617    ,        -617       ,     -617      ,      -617     ,    -617       ,      -617     ,      -617       ,    -617     ,    -617   ,   -617    ,   -617    ,    -617    ,    -617      ,     -617      ,     -617      ,       -617        ,    -617   ,     -617      ,      -617    ,  -617   ,   -617   ,  -617 ,     -600     },
            /* termCond     */{    -618     ,      -618     ,    -618   ,     -618    ,    -618     ,     -618      ,     -618      ,     -618      ,     -618      ,     -618      ,     -618      ,     -618      ,      -618     ,      -618     ,     -618      ,     -618      ,     -618      ,      66       ,       66      ,     -618      ,     65        ,     -618      ,     65        ,     -618      ,     -618      ,     -618      ,      65       ,     -618      ,     -618      ,     -618      ,     -618      ,      -618     ,      -618     ,      -618     ,      -618     ,     -618      ,      -618     ,      -618     ,   -618    ,    -618   ,      -618     ,    -618   ,   -618    ,   -618    ,     -618      ,   -618    ,     -618      ,    -618       ,     -618      ,    -618   ,    -618   ,      -618     ,     -618      ,      -618     ,    -618       ,      -618     ,      -618     ,      -618     ,   -618    ,     -618      ,    -618   ,    -618   ,      -618     ,   -618    ,   -618    ,    -618   ,    -618   ,      -618     ,   -618    ,     -618      ,    -618   ,     -618      ,    -618   ,   -618    ,   -618    ,      -618     ,     -618      ,    -618   ,    -618   ,    -618       ,     -618      ,    -618   ,   -618    ,      -618     ,     -618      ,   -618    ,       -618        ,     -618  ,    -618   ,     -618      ,     -618      ,    -618   ,       -618    ,        -618       ,     -618      ,      -618     ,    -618       ,      -618     ,      -618       ,    -618     ,    -618   ,   -618    ,   -618    ,    -618    ,    -618      ,     -618      ,     -618      ,       -618        ,    -618   ,     -618      ,      -618    ,  -618   ,   -618   ,  -618 ,     -600     },
            /* oprel        */{    -619     ,      -619     ,    -619   ,     -619    ,    -619     ,     -619      ,     -619      ,     -619      ,     -619      ,     -619      ,      67       ,      68       ,       70      ,       69      ,      71       ,      72       ,     -619      ,     -619      ,      -619     ,     -619      ,    -619       ,     -619      ,    -619       ,     -619      ,     -619      ,     -619      ,     -619      ,     -619      ,     -619      ,     -619      ,     -619      ,      -619     ,      -619     ,      -619     ,      -619     ,     -619      ,      -619     ,      -619     ,   -619    ,    -619   ,      -619     ,    -619   ,   -619    ,   -619    ,     -619      ,   -619    ,     -619      ,    -619       ,     -619      ,    -619   ,    -619   ,      -619     ,     -619      ,      -619     ,    -619       ,      -619     ,      -619     ,      -619     ,   -619    ,     -619      ,    -619   ,    -619   ,      -619     ,   -619    ,   -619    ,    -619   ,    -619   ,      -619     ,   -619    ,     -619      ,    -619   ,     -619      ,    -619   ,   -619    ,   -619    ,      -619     ,     -619      ,    -619   ,    -619   ,    -619       ,     -619      ,    -619   ,   -619    ,      -619     ,     -619      ,   -619    ,       -619        ,     -619  ,    -619   ,     -619      ,     -619      ,    -619   ,       -619    ,        -619       ,     -619      ,      -619     ,    -619       ,      -619     ,      -619       ,    -619     ,    -619   ,   -619    ,   -619    ,    -619    ,    -619      ,     -619      ,     -619      ,       -619        ,    -619   ,     -619      ,      -619    ,  -619   ,   -619   ,  -619 ,     -600     },
            /* opLog        */{    -620     ,      -620     ,    -620   ,     -620    ,    -620     ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,      -620     ,      -620     ,     -620      ,     -620      ,     -620      ,      74       ,       73      ,     -620      ,    -620       ,     -620      ,    -620       ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,     -620      ,      -620     ,      -620     ,      -620     ,      -620     ,     -620      ,      -620     ,      -620     ,   -620    ,    -620   ,      -620     ,    -620   ,   -620    ,   -620    ,     -620      ,   -620    ,     -620      ,    -620       ,     -620      ,    -620   ,    -620   ,      -620     ,     -620      ,      -620     ,    -620       ,      -620     ,      -620     ,      -620     ,   -620    ,     -620      ,    -620   ,    -620   ,      -620     ,   -620    ,   -620    ,    -620   ,    -620   ,      -620     ,   -620    ,     -620      ,    -620   ,     -620      ,    -620   ,   -620    ,   -620    ,      -620     ,     -620      ,    -620   ,    -620   ,    -620       ,     -620      ,    -620   ,   -620    ,      -620     ,     -620      ,   -620    ,       -620        ,     -620  ,    -620   ,     -620      ,     -620      ,    -620   ,       -620    ,        -620       ,     -620      ,      -620     ,    -620       ,      -620     ,      -620       ,    -620     ,    -620   ,   -620    ,   -620    ,    -620    ,    -620      ,     -620      ,     -620      ,       -620        ,    -620   ,     -620      ,      -620    ,  -620   ,   -620   ,  -620 ,     -600     },
            /* demas        */{    -621     ,      -621     ,    -621   ,     -621    ,    -621     ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,      -621     ,      -621     ,     -621      ,     -621      ,     -621      ,     -621      ,      -621     ,     -621      ,    -621       ,     -621      ,     75        ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,      -621     ,      -621     ,      -621     ,      -621     ,     -621      ,      -621     ,      -621     ,   -621    ,    -621   ,      -621     ,    -621   ,   -621    ,   -621    ,     -621      ,    76     ,     -621      ,    -621       ,     -621      ,    -621   ,    -621   ,      -621     ,     -621      ,      -621     ,    -621       ,      -621     ,      -621     ,      -621     ,   -621    ,     -621      ,    -621   ,    -621   ,      -621     ,   -621    ,   -621    ,    -621   ,    -621   ,      -621     ,   -621    ,     -621      ,    -621   ,     -621      ,    -621   ,   -621    ,   -621    ,      -621     ,     -621      ,    -621   ,    -621   ,    -621       ,     -621      ,    -621   ,   -621    ,      -621     ,     -621      ,   -621    ,       -621        ,      75   ,    -621   ,     -621      ,     -621      ,    -621   ,       -621    ,        -621       ,     -621      ,      -621     ,    -621       ,      -621     ,      -621       ,    -621     ,    -621   ,   -621    ,   -621    ,    -621    ,    -621      ,     -621      ,     -621      ,       -621        ,    -621   ,     -621      ,      -621    ,  -621   ,   -621   ,  -621 ,     -600     },
            /* demas1       */{    -621     ,      -621     ,    -621   ,     -621    ,    -621     ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,      -621     ,      -621     ,     -621      ,     -621      ,     -621      ,     -621      ,      -621     ,     -621      ,    -621       ,      77       ,    -621       ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,     -621      ,      -621     ,      -621     ,      -621     ,      -621     ,     -621      ,      -621     ,      -621     ,   -621    ,    -621   ,      -621     ,    -621   ,   -621    ,   -621    ,     -621      ,   -621    ,     -621      ,    -621       ,     -621      ,    -621   ,    -621   ,      -621     ,     -621      ,      -621     ,    -621       ,      -621     ,      -621     ,      -621     ,   -621    ,     -621      ,    -621   ,    -621   ,      -621     ,   -621    ,   -621    ,    -621   ,    -621   ,      -621     ,   -621    ,     -621      ,    -621   ,     -621      ,    -621   ,   -621    ,   -621    ,      -621     ,     -621      ,    -621   ,    -621   ,    -621       ,      78       ,    -621   ,   -621    ,      -621     ,     -621      ,   -621    ,       -621        ,     -621  ,    -621   ,     -621      ,     -621      ,    -621   ,       -621    ,        -621       ,     -621      ,      -621     ,    -621       ,      -621     ,      -621       ,    -621     ,    -621   ,   -621    ,   -621    ,    -621    ,    -621      ,     -621      ,     -621      ,       -621        ,    -621   ,     -621      ,      -621    ,  -621   ,   -621   ,  -621 ,     -600     },
            /* por          */{    -622     ,      -622     ,    -622   ,     -622    ,    -622     ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,      -622     ,      -622     ,     -622      ,     -622      ,     -622      ,     -622      ,      -622     ,     -622      ,    -622       ,     -622      ,    -622       ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,     -622      ,      -622     ,      -622     ,      -622     ,      -622     ,     -622      ,      -622     ,      -622     ,   -622    ,    -622   ,      -622     ,    -622   ,   -622    ,   -622    ,     -622      ,   -622    ,     -622      ,    -622       ,     -622      ,    -622   ,    -622   ,      -622     ,     -622      ,      -622     ,    -622       ,      -622     ,      -622     ,      -622     ,   -622    ,     -622      ,    -622   ,    -622   ,      -622     ,   -622    ,   -622    ,    -622   ,    -622   ,      -622     ,   -622    ,     -622      ,    -622   ,     -622      ,    -622   ,   -622    ,   -622    ,      -622     ,      79       ,    -622   ,    -622   ,    -622       ,     -622      ,    -622   ,   -622    ,      -622     ,     -622      ,   -622    ,       -622        ,     -622  ,    -622   ,     -622      ,     -622      ,    -622   ,       -622    ,        -622       ,     -622      ,      -622     ,    -622       ,      -622     ,      -622       ,    -622     ,    -622   ,   -622    ,   -622    ,    -622    ,    -622      ,     -622      ,     -622      ,       -622        ,    -622   ,     -622      ,      -622    ,  -622   ,   -622   ,  -622 ,     -600     },
            /* decasig      */{     81      ,      -623     ,    -623   ,     -623    ,    -623     ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,     -623      ,    -623       ,     -623      ,    -623       ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,      -623     ,      -623     ,     -623      ,      -623     ,      -623     ,   -623    ,    -623   ,      -623     ,    -623   ,   -623    ,   -623    ,      80       ,   -623    ,     -623      ,    -623       ,     -623      ,    -623   ,    -623   ,      -623     ,     -623      ,      -623     ,    -623       ,      -623     ,      -623     ,      -623     ,   -623    ,     -623      ,    -623   ,    -623   ,      -623     ,   -623    ,   -623    ,    -623   ,    -623   ,      -623     ,   -623    ,     -623      ,    -623   ,     -623      ,    -623   ,   -623    ,   -623    ,      -623     ,     -623      ,    -623   ,    -623   ,    -623       ,     -623      ,    -623   ,   -623    ,      -623     ,     -623      ,   -623    ,       -623        ,     -623  ,    -623   ,     -623      ,     -623      ,    -623   ,        80     ,        -623       ,     -623      ,      -623     ,    -623       ,       80      ,       80        ,    -623     ,     80    ,    80     ,   -623    ,    -623    ,    -623      ,     -623      ,     -623      ,       -623        ,    -623   ,     -623      ,      -623    ,  -623   ,   -623   ,  -623 ,     -600     },
            /* declaracion  */{    -623     ,      -623     ,    -623   ,     -623    ,    -623     ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,     -623      ,    -623       ,     -623      ,    -623       ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,      -623     ,      -623     ,     -623      ,      -623     ,      -623     ,   -623    ,    -623   ,      -623     ,    -623   ,   -623    ,   -623    ,      82       ,   -623    ,     -623      ,    -623       ,     -623      ,    -623   ,    -623   ,      -623     ,     -623      ,      -623     ,    -623       ,      -623     ,      -623     ,      -623     ,   -623    ,     -623      ,    -623   ,    -623   ,      -623     ,   -623    ,   -623    ,    -623   ,    -623   ,      -623     ,   -623    ,     -623      ,    -623   ,     -623      ,    -623   ,   -623    ,   -623    ,      -623     ,     -623      ,    -623   ,    -623   ,    -623       ,     -623      ,    -623   ,   -623    ,      -623     ,     -623      ,   -623    ,       -623        ,     -623  ,    -623   ,     -623      ,     -623      ,    -623   ,        82     ,        -623       ,     -623      ,      -623     ,    -623       ,       82      ,       82        ,    -623     ,     82    ,    82     ,   -623    ,    -623    ,    -623      ,     -623      ,     -623      ,       -623        ,    -623   ,     -623      ,      -623    ,  -623   ,   -623   ,  -623 ,      113     },
            /* multiples    */{    -624     ,      -624     ,    -624   ,     -624    ,    -624     ,     -624      ,     -624      ,     -624      ,     -624      ,     -624      ,     -624      ,     -624      ,      -624     ,      -624     ,     -624      ,     -624      ,     -624      ,     -624      ,      -624     ,     -624      ,    -624       ,     -624      ,    -624       ,     -624      ,     -624      ,      84       ,      83       ,     -624      ,     -624      ,     -624      ,     -624      ,      -624     ,      -624     ,       83      ,       83      ,      83       ,       83      ,      -624     ,   -624    ,    -624   ,      -624     ,    -624   ,   -624    ,   -624    ,     -624      ,   -624    ,     -624      ,    -624       ,     -624      ,    -624   ,    -624   ,      -624     ,     -624      ,      -624     ,    -624       ,      -624     ,      -624     ,      -624     ,   -624    ,     -624      ,    -624   ,    -624   ,      -624     ,   -624    ,   -624    ,    -624   ,    -624   ,      -624     ,   -624    ,     -624      ,    -624   ,     -624      ,    -624   ,   -624    ,   -624    ,      -624     ,     -624      ,    -624   ,    -624   ,    -624       ,     -624      ,    -624   ,   -624    ,      -624     ,     -624      ,   -624    ,       -624        ,     -624  ,    -624   ,     -624      ,     -624      ,    -624   ,       -624    ,        -624       ,     -624      ,      -624     ,    -624       ,      -624     ,      -624       ,    -624     ,    -624   ,   -624    ,   -624    ,    -624    ,    -624      ,      83       ,     -624      ,       -624        ,    -624   ,     -624      ,      -624    ,  -624   ,   -624   ,  -624 ,     -600     },
            /* asignacion1  */{     85      ,      -607     ,    -607   ,     -607    ,    -607     ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,      -607     ,      -607     ,     -607      ,     -607      ,     -607      ,     -607      ,      -607     ,     -607      ,    -607       ,     -607      ,    -607       ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,     -607      ,      -607     ,      -607     ,      -607     ,      -607     ,     -607      ,      -607     ,      -607     ,   -607    ,    -607   ,      -607     ,    -607   ,   -607    ,   -607    ,     -607      ,   -607    ,     -607      ,    -607       ,     -607      ,    -607   ,    -607   ,      -607     ,     -607      ,      -607     ,    -607       ,      -607     ,      -607     ,      -607     ,   -607    ,     -607      ,    -607   ,    -607   ,      -607     ,   -607    ,   -607    ,    -607   ,    -607   ,      -607     ,   -607    ,     -607      ,    -607   ,     -607      ,    -607   ,   -607    ,   -607    ,      -607     ,     -607      ,    -607   ,    -607   ,    -607       ,     -607      ,    -607   ,   -607    ,      -607     ,     -607      ,   -607    ,       -607        ,     -607  ,    -607   ,     -607      ,     -607      ,    -607   ,       -607    ,        -607       ,     -607      ,      -607     ,    -607       ,      -607     ,      -607       ,    -607     ,    -607   ,   -607    ,   -607    ,    -607    ,    -607      ,     -607      ,     -607      ,       -607        ,    -607   ,     -607      ,      -607    ,  -607   ,   -607   ,  -607 ,     -600     },
            /* incremento   */{    -625     ,      -625     ,    -625   ,     -625    ,    -625     ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,      -625     ,      -625     ,     -625      ,     -625      ,     -625      ,     -625      ,      -625     ,     -625      ,    -625       ,     -625      ,    -625       ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,     -625      ,       86      ,       87      ,       88      ,       88      ,      88       ,       88      ,      -625     ,   -625    ,    -625   ,      -625     ,    -625   ,   -625    ,   -625    ,     -625      ,   -625    ,     -625      ,    -625       ,     -625      ,    -625   ,    -625   ,      -625     ,     -625      ,      -625     ,    -625       ,      -625     ,      -625     ,      -625     ,   -625    ,     -625      ,    -625   ,    -625   ,      -625     ,   -625    ,   -625    ,    -625   ,    -625   ,      -625     ,   -625    ,     -625      ,    -625   ,     -625      ,    -625   ,   -625    ,   -625    ,      -625     ,     -625      ,    -625   ,    -625   ,    -625       ,     -625      ,    -625   ,   -625    ,      -625     ,     -625      ,   -625    ,       -625        ,     -625  ,    -625   ,     -625      ,     -625      ,    -625   ,       -625    ,        -625       ,     -625      ,      -625     ,    -625       ,      -625     ,      -625       ,    -625     ,    -625   ,   -625    ,   -625    ,    -625    ,    -625      ,      88       ,     -625      ,       -625        ,    -625   ,     -625      ,      -625    ,  -625   ,   -625   ,  -625 ,     -600     },
            /* opasig       */{    -626     ,      -626     ,    -626   ,     -626    ,    -626     ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,      -626     ,      -626     ,     -626      ,     -626      ,     -626      ,     -626      ,      -626     ,     -626      ,    -626       ,     -626      ,    -626       ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,     -626      ,      -626     ,      -626     ,       89      ,       90      ,      91       ,       92      ,      -626     ,   -626    ,    -626   ,      -626     ,    -626   ,   -626    ,   -626    ,     -626      ,   -626    ,     -626      ,    -626       ,     -626      ,    -626   ,    -626   ,      -626     ,     -626      ,      -626     ,    -626       ,      -626     ,      -626     ,      -626     ,   -626    ,     -626      ,    -626   ,    -626   ,      -626     ,   -626    ,   -626    ,    -626   ,    -626   ,      -626     ,   -626    ,     -626      ,    -626   ,     -626      ,    -626   ,   -626    ,   -626    ,      -626     ,     -626      ,    -626   ,    -626   ,    -626       ,     -626      ,    -626   ,   -626    ,      -626     ,     -626      ,   -626    ,       -626        ,     -626  ,    -626   ,     -626      ,     -626      ,    -626   ,       -626    ,        -626       ,     -626      ,      -626     ,    -626       ,      -626     ,      -626       ,    -626     ,    -626   ,   -626    ,   -626    ,    -626    ,    -626      ,      93       ,     -626      ,       -626        ,    -626   ,     -626      ,      -626    ,  -626   ,   -626   ,  -626 ,     -600     },
            /* mientras     */{    -627     ,      -627     ,    -627   ,     -627    ,    -627     ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,      -627     ,      -627     ,     -627      ,     -627      ,     -627      ,     -627      ,      -627     ,     -627      ,    -627       ,     -627      ,    -627       ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,     -627      ,      -627     ,      -627     ,      -627     ,      -627     ,     -627      ,      -627     ,      -627     ,   -627    ,    -627   ,      -627     ,    -627   ,   -627    ,   -627    ,     -627      ,   -627    ,     -627      ,    -627       ,     -627      ,    -627   ,    -627   ,      -627     ,     -627      ,      -627     ,    -627       ,      -627     ,      -627     ,      -627     ,   -627    ,     -627      ,    -627   ,    -627   ,      -627     ,   -627    ,   -627    ,    -627   ,    -627   ,      -627     ,   -627    ,     -627      ,    -627   ,     -627      ,    -627   ,   -627    ,   -627    ,      -627     ,     -627      ,    -627   ,    -627   ,    -627       ,     -627      ,    -627   ,   -627    ,      -627     ,     -627      ,   -627    ,       -627        ,     -627  ,    -627   ,     -627      ,     -627      ,    -627   ,       -627    ,        -627       ,      94       ,      -627     ,    -627       ,      -627     ,      -627       ,    -627     ,    -627   ,   -627    ,   -627    ,    -627    ,    -627      ,     -627      ,     -627      ,       -627        ,    -627   ,     -627      ,      -627    ,  -627   ,   -627   ,  -627 ,     -600     },
            /* hacer        */{    -628     ,      -628     ,    -628   ,     -628    ,    -628     ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,      -628     ,      -628     ,     -628      ,     -628      ,     -628      ,     -628      ,      -628     ,     -628      ,    -628       ,     -628      ,    -628       ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,     -628      ,      -628     ,      -628     ,      -628     ,      -628     ,     -628      ,      -628     ,      -628     ,   -628    ,    -628   ,      -628     ,    -628   ,   -628    ,   -628    ,     -628      ,   -628    ,     -628      ,    -628       ,     -628      ,    -628   ,    -628   ,      -628     ,     -628      ,      -628     ,    -628       ,      -628     ,      -628     ,      -628     ,   -628    ,     -628      ,    -628   ,    -628   ,      -628     ,   -628    ,   -628    ,    -628   ,    -628   ,      -628     ,   -628    ,     -628      ,    -628   ,     -628      ,     95    ,   -628    ,   -628    ,      -628     ,     -628      ,    -628   ,    -628   ,    -628       ,     -628      ,    -628   ,   -628    ,      -628     ,     -628      ,   -628    ,       -628        ,     -628  ,    -628   ,     -628      ,     -628      ,    -628   ,       -628    ,        -628       ,     -628      ,      -628     ,    -628       ,      -628     ,      -628       ,    -628     ,    -628   ,   -628    ,   -628    ,    -628    ,    -628      ,     -628      ,     -628      ,       -628        ,    -628   ,     -628      ,      -628    ,  -628   ,   -628   ,  -628 ,     -600     },
            /* leer         */{    -629     ,      -629     ,    -629   ,     -629    ,    -629     ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,      -629     ,      -629     ,     -629      ,     -629      ,     -629      ,     -629      ,      -629     ,     -629      ,    -629       ,     -629      ,    -629       ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,     -629      ,      -629     ,      -629     ,      -629     ,      -629     ,     -629      ,      -629     ,      -629     ,   -629    ,    -629   ,      -629     ,    -629   ,   -629    ,   -629    ,     -629      ,   -629    ,     -629      ,    -629       ,     -629      ,    -629   ,    -629   ,      -629     ,     -629      ,      -629     ,    -629       ,      -629     ,      -629     ,      -629     ,   -629    ,     -629      ,    -629   ,    -629   ,      -629     ,   -629    ,   -629    ,    -629   ,    -629   ,      -629     ,   -629    ,     -629      ,    -629   ,     -629      ,    -629   ,   -629    ,   -629    ,      -629     ,     -629      ,    -629   ,    -629   ,    -629       ,     -629      ,    -629   ,   -629    ,      -629     ,     -629      ,   -629    ,       -629        ,     -629  ,    -629   ,     -629      ,     -629      ,    -629   ,       -629    ,        -629       ,     -629      ,      -629     ,    -629       ,      -629     ,      -629       ,    -629     ,    -629   ,   -629    ,   -629    ,    -629    ,    -629      ,     -629      ,     -629      ,       -629        ,    -629   ,     -629      ,      -629    ,   96    ,   -629   ,  -629 ,     -600     },
            /* escribir     */{    -630     ,      -630     ,    -630   ,     -630    ,    -630     ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,      -630     ,      -630     ,     -630      ,     -630      ,     -630      ,     -630      ,      -630     ,     -630      ,    -630       ,     -630      ,    -630       ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,     -630      ,      -630     ,      -630     ,      -630     ,      -630     ,     -630      ,      -630     ,      -630     ,   -630    ,    -630   ,      -630     ,    -630   ,   -630    ,   -630    ,     -630      ,   -630    ,     -630      ,    -630       ,     -630      ,    -630   ,    -630   ,      -630     ,     -630      ,      -630     ,    -630       ,      -630     ,      -630     ,      -630     ,   -630    ,     -630      ,    -630   ,    -630   ,      -630     ,   -630    ,   -630    ,    -630   ,    -630   ,      -630     ,   -630    ,     -630      ,    -630   ,     -630      ,    -630   ,   -630    ,   -630    ,      -630     ,     -630      ,    -630   ,    -630   ,    -630       ,     -630      ,    -630   ,   -630    ,      -630     ,     -630      ,   -630    ,       -630        ,     -630  ,    -630   ,     -630      ,     -630      ,    -630   ,       -630    ,        -630       ,     -630      ,      -630     ,    -630       ,      -630     ,      -630       ,    -630     ,    -630   ,   -630    ,   -630    ,    -630    ,     97       ,     -630      ,     -630      ,       -630        ,    -630   ,     -630      ,      -630    ,  -630   ,   -630   ,  -630 ,     -600     },
            /* invocar      */{     98      ,      -631     ,    -631   ,     -631    ,    -631     ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,      -631     ,      -631     ,     -631      ,     -631      ,     -631      ,     -631      ,      -631     ,     -631      ,    -631       ,     -631      ,    -631       ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,     -631      ,      -631     ,      -631     ,      -631     ,      -631     ,     -631      ,      -631     ,      -631     ,   -631    ,    -631   ,      -631     ,    -631   ,   -631    ,   -631    ,     -631      ,   -631    ,     -631      ,    -631       ,     -631      ,    -631   ,    -631   ,      -631     ,     -631      ,      -631     ,    -631       ,      -631     ,      -631     ,      -631     ,   -631    ,     -631      ,    -631   ,    -631   ,      -631     ,   -631    ,   -631    ,    -631   ,    -631   ,      -631     ,   -631    ,     -631      ,    -631   ,     -631      ,    -631   ,   -631    ,   -631    ,      -631     ,     -631      ,    -631   ,    -631   ,    -631       ,     -631      ,    -631   ,   -631    ,      -631     ,     -631      ,   -631    ,       -631        ,     -631  ,    -631   ,     -631      ,     -631      ,    -631   ,       -631    ,        -631       ,     -631      ,      -631     ,    -631       ,      -631     ,      -631       ,    -631     ,    -631   ,   -631    ,   -631    ,    -631    ,    -631      ,     -631      ,     -631      ,       -631        ,    -631   ,     -631      ,      -631    ,  -631   ,   -631   ,  -631 ,     -600     },
            /* obj          */{     125     ,      -632     ,    -632   ,     -632    ,    -632     ,     -632      ,     -632      ,     -632      ,     -632      ,     -632      ,     -632      ,     -632      ,      -632     ,      -632     ,     -632      ,     -632      ,     -632      ,     -632      ,      -632     ,      100      ,    -632       ,     -632      ,    -632       ,     -632      ,     -632      ,     -632      ,     -632      ,     -632      ,     -632      ,      99       ,     -632      ,      -632     ,      -632     ,      -632     ,      -632     ,     -632      ,      -632     ,      -632     ,   -632    ,    -632   ,      -632     ,    -632   ,   -632    ,   -632    ,     -632      ,   -632    ,     -632      ,    -632       ,     -632      ,    -632   ,    -632   ,      -632     ,     -632      ,      -632     ,    -632       ,      -632     ,      -632     ,      -632     ,   -632    ,     -632      ,    -632   ,    -632   ,      -632     ,   -632    ,   -632    ,    -632   ,    -632   ,      -632     ,   -632    ,     -632      ,    -632   ,     -632      ,    -632   ,   -632    ,   -632    ,      -632     ,     -632      ,    -632   ,    -632   ,    -632       ,     -632      ,    -632   ,   -632    ,      -632     ,     -632      ,   -632    ,       -632        ,     -632  ,    -632   ,     -632      ,     -632      ,    -632   ,       -632    ,        -632       ,     -632      ,      -632     ,    -632       ,      -632     ,      -632       ,    -632     ,    -632   ,   -632    ,   -632    ,    -632    ,    -632      ,     -632      ,     -632      ,       -632        ,    -632   ,     -632      ,      -632    ,  -632   ,   -632   ,  -632 ,     -600     },
            /* paramobj     */{     101     ,       101     ,     101   ,      101    ,    -633     ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,      -633     ,      -633     ,     -633      ,     -633      ,     -633      ,     -633      ,      -633     ,     -633      ,     102       ,     -633      ,    -633       ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,      -633     ,      -633     ,      -633     ,      -633     ,     -633      ,      -633     ,      -633     ,   -633    ,    -633   ,      -633     ,    -633   ,   -633    ,   -633    ,     -633      ,   -633    ,     -633      ,    -633       ,     -633      ,    -633   ,    -633   ,      -633     ,     -633      ,      -633     ,    -633       ,      -633     ,      -633     ,      -633     ,   -633    ,     -633      ,    -633   ,    -633   ,      -633     ,   -633    ,   -633    ,    -633   ,    -633   ,      -633     ,   -633    ,     -633      ,    -633   ,     -633      ,    -633   ,   -633    ,   -633    ,      -633     ,     -633      ,    -633   ,    -633   ,    -633       ,     -633      ,    -633   ,   -633    ,      -633     ,     -633      ,   -633    ,       -633        ,     -633  ,    -633   ,     -633      ,     -633      ,    -633   ,       -633    ,        -633       ,     -633      ,      -633     ,    -633       ,      -633     ,      -633       ,    -633     ,    -633   ,   -633    ,   -633    ,    -633    ,    -633      ,     -633      ,     -633      ,       -633        ,    -633   ,     -633      ,      -633    ,  -633   ,   -633   ,  -633 ,     -600     },
            /* paramobj1    */{    -633     ,      -633     ,    -633   ,     -633    ,    -633     ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,      -633     ,      -633     ,     -633      ,     -633      ,     -633      ,     -633      ,      -633     ,     -633      ,     103       ,     -633      ,    -633       ,     -633      ,     -633      ,      104      ,     -633      ,     -633      ,     -633      ,     -633      ,     -633      ,      -633     ,      -633     ,      -633     ,      -633     ,     -633      ,      -633     ,      -633     ,   -633    ,    -633   ,      -633     ,    -633   ,   -633    ,   -633    ,     -633      ,   -633    ,     -633      ,    -633       ,     -633      ,    -633   ,    -633   ,      -633     ,     -633      ,      -633     ,    -633       ,      -633     ,      -633     ,      -633     ,   -633    ,     -633      ,    -633   ,    -633   ,      -633     ,   -633    ,   -633    ,    -633   ,    -633   ,      -633     ,   -633    ,     -633      ,    -633   ,     -633      ,    -633   ,   -633    ,   -633    ,      -633     ,     -633      ,    -633   ,    -633   ,    -633       ,     -633      ,    -633   ,   -633    ,      -633     ,     -633      ,   -633    ,       -633        ,     -633  ,    -633   ,     -633      ,     -633      ,    -633   ,       -633    ,        -633       ,     -633      ,      -633     ,    -633       ,      -633     ,      -633       ,    -633     ,    -633   ,   -633    ,   -633    ,    -633    ,    -633      ,     -633      ,     -633      ,       -633        ,    -633   ,     -633      ,      -633    ,  -633   ,   -633   ,  -633 ,     -600     },
            /* cambiar      */{    -634     ,      -634     ,    -634   ,     -634    ,    -634     ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,      -634     ,      -634     ,     -634      ,     -634      ,     -634      ,     -634      ,      -634     ,     -634      ,    -634       ,     -634      ,    -634       ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,     -634      ,      -634     ,      -634     ,      -634     ,      -634     ,     -634      ,      -634     ,      -634     ,   -634    ,    -634   ,      -634     ,    -634   ,   -634    ,   -634    ,     -634      ,   -634    ,     -634      ,    -634       ,     -634      ,    -634   ,    -634   ,      -634     ,     -634      ,      -634     ,    -634       ,      -634     ,      -634     ,      -634     ,   -634    ,     -634      ,    -634   ,     105   ,      -634     ,   -634    ,   -634    ,    -634   ,    -634   ,      -634     ,   -634    ,     -634      ,    -634   ,     -634      ,    -634   ,   -634    ,   -634    ,      -634     ,     -634      ,    -634   ,    -634   ,    -634       ,     -634      ,    -634   ,   -634    ,      -634     ,     -634      ,   -634    ,       -634        ,     -634  ,    -634   ,     -634      ,     -634      ,    -634   ,       -634    ,        -634       ,     -634      ,      -634     ,    -634       ,      -634     ,      -634       ,    -634     ,    -634   ,   -634    ,   -634    ,    -634    ,    -634      ,     -634      ,     -634      ,       -634        ,    -634   ,     -634      ,      -634    ,  -634   ,   -634   ,  -634 ,     -600     },
            /* casos        */{    -635     ,      -635     ,    -635   ,     -635    ,    -635     ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,      -635     ,      -635     ,     -635      ,     -635      ,     -635      ,     -635      ,      -635     ,     -635      ,    -635       ,     -635      ,     107       ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,      -635     ,      -635     ,      -635     ,      -635     ,     -635      ,      -635     ,      -635     ,   -635    ,    -635   ,      -635     ,    -635   ,   -635    ,    106    ,     -635      ,   -635    ,     -635      ,    -635       ,     -635      ,    -635   ,    -635   ,      -635     ,     -635      ,      -635     ,    -635       ,      -635     ,      -635     ,      -635     ,   -635    ,     -635      ,    -635   ,    -635   ,      -635     ,   -635    ,   -635    ,    -635   ,    -635   ,      -635     ,   -635    ,     -635      ,     107   ,     -635      ,    -635   ,   -635    ,   -635    ,      -635     ,     -635      ,    -635   ,    -635   ,    -635       ,     -635      ,    -635   ,   -635    ,      -635     ,     -635      ,   -635    ,       -635        ,     -635  ,    -635   ,     -635      ,     -635      ,    -635   ,       -635    ,        -635       ,     -635      ,      -635     ,    -635       ,      -635     ,      -635       ,    -635     ,    -635   ,   -635    ,   -635    ,    -635    ,    -635      ,     -635      ,     -635      ,       -635        ,    -635   ,     -635      ,      -635    ,  -635   ,   -635   ,  -635 ,     -600     },
            /* defecto      */{    -636     ,      -636     ,    -636   ,     -636    ,    -636     ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,      -636     ,      -636     ,     -636      ,     -636      ,     -636      ,     -636      ,      -636     ,     -636      ,    -636       ,     -636      ,     109       ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,     -636      ,      -636     ,      -636     ,      -636     ,      -636     ,     -636      ,      -636     ,      -636     ,   -636    ,    -636   ,      -636     ,    -636   ,   -636    ,   -636    ,     -636      ,   -636    ,     -636      ,    -636       ,     -636      ,    -636   ,    -636   ,      -636     ,     -636      ,      -636     ,    -636       ,      -636     ,      -636     ,      -636     ,   -636    ,     -636      ,    -636   ,    -636   ,      -636     ,   -636    ,   -636    ,    -636   ,    -636   ,      -636     ,   -636    ,     -636      ,     108   ,     -636      ,    -636   ,   -636    ,   -636    ,      -636     ,     -636      ,    -636   ,    -636   ,    -636       ,     -636      ,    -636   ,   -636    ,      -636     ,     -636      ,   -636    ,       -636        ,     -636  ,    -636   ,     -636      ,     -636      ,    -636   ,       -636    ,        -636       ,     -636      ,      -636     ,    -636       ,      -636     ,      -636       ,    -636     ,    -636   ,   -636    ,   -636    ,    -636    ,    -636      ,     -636      ,     -636      ,       -636        ,    -636   ,     -636      ,      -636    ,  -636   ,   -636   ,  -636 ,     -600     },
            /* caso         */{    -635     ,      -635     ,    -635   ,     -635    ,    -635     ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,      -635     ,      -635     ,     -635      ,     -635      ,     -635      ,     -635      ,      -635     ,     -635      ,    -635       ,     -635      ,    -635       ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,     -635      ,      -635     ,      -635     ,      -635     ,      -635     ,     -635      ,      -635     ,      -635     ,   -635    ,    -635   ,      -635     ,    -635   ,   -635    ,    110    ,     -635      ,   -635    ,     -635      ,    -635       ,     -635      ,    -635   ,    -635   ,      -635     ,     -635      ,      -635     ,    -635       ,      -635     ,      -635     ,      -635     ,   -635    ,     -635      ,    -635   ,    -635   ,      -635     ,   -635    ,   -635    ,    -635   ,    -635   ,      -635     ,   -635    ,     -635      ,    -635   ,     -635      ,    -635   ,   -635    ,   -635    ,      -635     ,     -635      ,    -635   ,    -635   ,    -635       ,     -635      ,    -635   ,   -635    ,      -635     ,     -635      ,   -635    ,       -635        ,     -635  ,    -635   ,     -635      ,     -635      ,    -635   ,       -635    ,        -635       ,     -635      ,      -635     ,    -635       ,      -635     ,      -635       ,    -635     ,    -635   ,   -635    ,   -635    ,    -635    ,    -635      ,     -635      ,     -635      ,       -635        ,    -635   ,     -635      ,      -635    ,  -635   ,   -635   ,  -635 ,     -600     },
            /* sentencia    */{     57      ,      -614     ,    -614   ,     -614    ,    -614     ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,      -614     ,      -614     ,     -614      ,     -614      ,     -614      ,     -614      ,      -614     ,     -614      ,    -614       ,     -614      ,    -614       ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,     -614      ,      -614     ,      -614     ,      -614     ,      -614     ,     -614      ,      -614     ,      -614     ,   -614    ,    -614   ,      -614     ,    -614   ,   -614    ,   -614    ,      54       ,   -614    ,     -614      ,    -614       ,     -614      ,    -614   ,    -614   ,      -614     ,     -614      ,      -614     ,    -614       ,      -614     ,      -614     ,      -614     ,   -614    ,     -614      ,    -614   ,     56    ,      -614     ,   -614    ,   -614    ,    -614   ,    -614   ,      -614     ,   -614    ,     -614      ,    -614   ,     -614      ,     55    ,   -614    ,   -614    ,      -614     ,      52       ,    -614   ,    -614   ,    -614       ,      51       ,    -614   ,   -614    ,      -614     ,     -614      ,   -614    ,       -614        ,     -614  ,    -614   ,     -614      ,     -614      ,    -614   ,        54     ,        -614       ,      53       ,      -614     ,    -614       ,       54      ,       54        ,    -614     ,     54    ,    54     ,   -614    ,    -614    ,     59       ,     -614      ,     -614      ,       -614        ,    -614   ,     -614      ,      -614    ,   58    ,   -614   ,  -614 ,     -600     },
            /* declafor     */{     57      ,      -623     ,    -623   ,     -623    ,    -623     ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,     -623      ,    -623       ,     -623      ,    -623       ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,      -623     ,      -623     ,     -623      ,      -623     ,      -623     ,   -623    ,    -623   ,      -623     ,    -623   ,   -623    ,   -623    ,     111       ,   -623    ,     -623      ,    -623       ,     -623      ,    -623   ,    -623   ,      -623     ,     -623      ,      -623     ,    -623       ,      -623     ,      -623     ,      -623     ,   -623    ,     -623      ,    -623   ,     56    ,      -623     ,   -623    ,   -623    ,    -623   ,    -623   ,      -623     ,   -623    ,     -623      ,    -623   ,     -623      ,     55    ,   -623    ,   -623    ,      -623     ,      52       ,    -623   ,    -623   ,    -623       ,      51       ,    -623   ,   -623    ,      -623     ,     -623      ,   -623    ,       -623        ,     -623  ,    -623   ,     -623      ,     -623      ,    -623   ,       111     ,        -623       ,      53       ,      -623     ,    -623       ,      111      ,      111        ,    -623     ,    111    ,   111     ,   -623    ,    -623    ,     59       ,     -623      ,     -623      ,       -623        ,    -623   ,     -623      ,      -623    ,   58    ,   -623   ,  -623 ,     -600     },
            /* invocar1     */{   -623      ,      -623     ,    -623   ,     -623    ,    -623     ,      116      ,      116      ,      116      ,      116      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      115      ,    -623       ,     -623      ,    -623       ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      115      ,     -623      ,      -623     ,      -623     ,      -623     ,      -623     ,     -623      ,      -623     ,      -623     ,   -623    ,    -623   ,      -623     ,    -623   ,   -623    ,   -623    ,    -623       ,   -623    ,     -623      ,    -623       ,     -623      ,    -623   ,    -623   ,      -623     ,     -623      ,      -623     ,    -623       ,      -623     ,      -623     ,      -623     ,   -623    ,     -623      ,    -623   ,     56    ,      -623     ,   -623    ,   -623    ,    -623   ,    -623   ,      -623     ,   -623    ,     -623      ,    -623   ,     -623      ,     55    ,   -623    ,   -623    ,      -623     ,      52       ,    -623   ,    -623   ,    -623       ,    -623       ,    -623   ,   -623    ,      -623     ,     -623      ,   -623    ,       -623        ,     -623  ,    -623   ,     -623      ,     -623      ,    -623   ,      -623     ,        -623       ,    -623       ,      -623     ,    -623       ,      -623     ,      -623       ,    -623     ,    -623   ,   -623    ,   -623    ,    -623    ,    -623      ,      116      ,     -623      ,       -623        ,    -623   ,     -623      ,      -623    ,   -623  ,   -623   ,  -623 ,     -600     },
            /* invocar2     */{    118      ,       119     ,     120   ,      121    ,    -623     ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      115      ,    -623       ,     -623      ,    -623       ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,     -623      ,      115      ,     -623      ,      -623     ,      -623     ,      -623     ,      -623     ,     -623      ,      -623     ,      -623     ,   -623    ,    -623   ,      -623     ,    -623   ,   -623    ,   -623    ,    -623       ,   -623    ,     -623      ,    -623       ,     -623      ,    -623   ,    -623   ,      -623     ,     -623      ,      -623     ,    -623       ,      -623     ,      -623     ,      -623     ,   -623    ,     -623      ,    -623   ,     56    ,      -623     ,   -623    ,   -623    ,    -623   ,    -623   ,      -623     ,   -623    ,     -623      ,    -623   ,     -623      ,    -623   ,   -623    ,   -623    ,      -623     ,     -623      ,    -623   ,    -623   ,    -623       ,    -623       ,    -623   ,   -623    ,      -623     ,     -623      ,   -623    ,       -623        ,     -623  ,    -623   ,     -623      ,     -623      ,    -623   ,      -623     ,        -623       ,    -623       ,      -623     ,    -623       ,      -623     ,      -623       ,    -623     ,    -623   ,   -623    ,   -623    ,    -623    ,    -623      ,     -623      ,     -623      ,       -623        ,    -623   ,     -623      ,      -623    ,   -623  ,   -623   ,  -623 ,     -600     },
            /* invocar3     */{   -623      ,      -623     ,    -623   ,     -623    ,    -623     ,      122      ,      122      ,      122      ,      122      ,     -623      ,     -623      ,     -623      ,      -623     ,      -623     ,     -623      ,     -623      ,     -623      ,     -623      ,      -623     ,      115      ,    -623       ,     -623      ,    -623       ,     -623      ,     -623      ,     -623      ,      124      ,     -623      ,     -623      ,      123      ,     -623      ,      -623     ,      -623     ,      -623     ,      -623     ,     -623      ,      -623     ,      -623     ,   -623    ,    -623   ,      -623     ,    -623   ,   -623    ,   -623    ,    -623       ,   -623    ,     -623      ,    -623       ,     -623      ,    -623   ,    -623   ,      -623     ,     -623      ,      -623     ,    -623       ,      -623     ,      -623     ,      -623     ,   -623    ,     -623      ,    -623   ,     56    ,      -623     ,   -623    ,   -623    ,    -623   ,    -623   ,      -623     ,   -623    ,     -623      ,    -623   ,     -623      ,    -623   ,   -623    ,   -623    ,      -623     ,     -623      ,    -623   ,    -623   ,    -623       ,    -623       ,    -623   ,   -623    ,      -623     ,     -623      ,   -623    ,       -623        ,     -623  ,    -623   ,     -623      ,     -623      ,    -623   ,      -623     ,        -623       ,    -623       ,      -623     ,    -623       ,      -623     ,      -623       ,    -623     ,    -623   ,   -623    ,   -623    ,    -623    ,    -623      ,     -623      ,     -623      ,       -623        ,    -623   ,     -623      ,      -623    ,   -623  ,   -623   ,  -623 ,     -600     },

        };

        public int[,] RepositorioReglas = new int[,]
       {
                /*1.      s        */   {1001, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*2.   programa    */   {1005,1002,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*3.   librerias   */   {-120, -130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*4.   librerias   */   {1002,1003,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*5.   libreria    */   {-27,-4,-54,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*6.   lib         */   {-4,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*7.   clases      */   {1006,1007,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*8.   clases1     */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*9.   clases1     */   {1006,1007,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*10.  clase       */   {-23,1010,-22,1009,-1,-68,1008,-130, 0, 0, 0, 0, 0,0,0,0,0},
                /*11.  alcance     */   {-110,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*12.  alcance     */   {-111,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*13.  alcance     */   {-112,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*14.  alcance     */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*15.  herencia    */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*16.  herencia    */   {-1,-50,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*17.  miembros    */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*18.  miembros    */   {1010,1011,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*19.  miembro     */   {1012,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*20.  metratricon */   {1013,1008,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*21.  metratricon1*/   {-23,1023,-22,-21,1017,-20,-1,-95,-130, 0, 0, 0, 0,0,0,0,0},
                /*22.  metratricon1*/   {-23,1023,-22,-21,1017,-20,-1,-130,0, 0, 0, 0, 0,0,0,0,0},
                /*23.  metratricon1*/   {1014,-1,1016,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*24.  metratricon2*/   {-23,-27,1019,-89,1023,-22,-21,1017,-20,-130, 0, 0, 0,0,0,0,0},
                /*25.  metratricon2*/   {-27,1015,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*26.  asignacion  */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*27.  asignacion  */   {1019,1038,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*28.  tipo        */   {-99,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*29.  tipo        */   {-102,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*30.  tipo        */   {-100,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*31.  tipo        */   {-46,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*32.  tipo        */   {-103,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*33.  tipo        */   {-94,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*34.  parametros  */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*35.  parametros  */   {1018,-1,1016,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*36.  parametros1 */   {1018,-1,1016,-26,-130, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*37.  parametros1 */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*38.  expresion   */   {1021,1020,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*39.  factor      */   {-1,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*40.  factor      */   {-2,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*41.  factor      */   {-3,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*42.  factor      */   {-4,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*43.  termino     */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*44.  termino     */   {1019,1022,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*45.  operarit    */   {-6,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*46.  operarit    */   {-7,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*47.  operarit    */   {-8,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*48.  operarit    */   {-9,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*49.  sentencias  */   {1023,1051,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*50.  sentencias  */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},///////////
                /*51.  sentencia   */   {1024,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*52.  sentencia   */   {1032,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*53.  sentencia   */   {1039,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*54.  sentencia   */   {1034,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*55.  sentencia   */   {1040,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*56.  sentencia   */   {1047,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*57.  sentencia   */   {1043,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*58.  sentencia   */   {1041,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*59.  sentencia   */   {1042,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*60.  si          */   {1030,-23,1023,-22,-21,1025,-20,-82,-130,0,0, 0, 0,0,0,0,0},
                /*61.  condicional */   {1027,1026,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*62.  factorCond  */   {-91,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*63.  factorCond  */   {-75,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*64.  factorCond  */   {1019,1028,1019,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*65.  termCond    */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*66.  termCond    */   {1025,1029,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*67.  oprel       */   {-11,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*68.  oprel       */   {-12,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*69.  oprel       */   {-14,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*70.  oprel       */   {-13,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*71.  oprel       */   {-15,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*72.  oprel       */   {-16,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*73.  opLog       */   {-19,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*74.  opLog       */   {-18,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*75.  demas       */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*76.  demas       */   {1031,-47,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*77.  demas1      */   {-23,1023,-22,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*78.  demas1      */   {1024,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ,0,0,0,0},
                /*79.  por         */   {-23,1023,-22,-21,1036,-27,1025,1033,-20,-78,-130,0,0,0,0,0,0}, ////// 
                /*80.  decasig     */   {1034,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*81.  decasig     */   {1036,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*82.  declaracion */   {-27,1015,1035,-1,1016,-130, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*83.  multiples   */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*84.  multiples   */   {1035,-1,-26,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*85.  asignacion1 */   {1037,-1,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*86.  incremento  */   {-33,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*87.  incremento  */   {-34,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*88.  incremento  */   {1019,1038,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*89.  opasig      */   {-35,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*90.  opasig      */   {-36,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*91.  opasig      */   {-37,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*92.  opasig      */   {-38,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*93.  opasig      */   {-107,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*94.  mientras    */   {-23,1023,-22,-21,1025,-20,-96,-130, 0, 0, 0, 0, 0,0,0,0,0},
                /*95.  hacer       */   {-27,-21,1025,-20,-96,-23,1023,-22,-74,-130, 0, 0, 0,0,0,0,0},
                /*96.  leer        */   {-21,-20,-113,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*97.  escribir    */   {-27,-21,1019,-20,-106,-130, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*98.  invocar     */   {1053,-1,-130,0,0,0,0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*99.  obj         */   {-1,-30,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*100. obj         */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*101. paramobj    */   {1046,1019,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*102. paramobj    */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*103. paramobj1   */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*104. paramobj1   */   {1019,-26,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*105. cambiar     */   {-23,1049,1048,-22,-21,1019,-20,-63,-130, 0, 0, 0, 0,0,0,0,0},
                /*106. casos       */   {1048,1050,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*107. casos       */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*108. defecto     */   {-27,-44,1023,-28,-72,-130, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*109. defecto     */   {-120,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*110. caso        */   {-27,-44,1023,-28,1020,-45,-130, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*111. declafor    */   {1015,1035,-1,1016,1020,-45,-130, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*112. operarit    */   {-26,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*113. tipo        */   {-114,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*114. alcance     */   {-39,-130, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*115. invocar1    */   {-27,-21,1045,-20,1044,-130, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*116. invocar1    */   {1054,1022,-130,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*117. operarit    */   {-107,-130,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*118. invocar2    */   {-27,1055,-1,-130,0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*119. invocar2    */   {-27,1055,-2,-130,0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*120. invocar2    */   {-27,1055,-3,-130,0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*121. invocar2    */   {-27,1055,-4,-130,0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*122. invocar3    */   {1019,1022,-130,0, 0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*123. invocar3    */   {1044,-30,-130,0,0,0,0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*124. invocar3    */   {-120,-130,0,0,0, 0, 0, 0, 0, 0, 0, 0, 0,0,0,0,0},
                /*125. obj         */   {-21,1045,-20,-1,-130,0, 0, 0, 0, 0, 0,0,0,0,0,0,0},

       };

        public void EjecutarSintactico(List<Token> listaTokens)
        {
            //incializo variables locales necesarias
            int renglon, columna = 0;
            int regla;

            do
            {
                Escuchador();

                if (listaSintactico[punteroSintactico] < 0)   // el elemento de la lista es un terminal (TOKEN)????
                {
                    if (listaSintactico[punteroSintactico] == -120)// es lamda ese terminal?
                    {
                        listaSintactico[punteroSintactico] = 0;
                        punteroSintactico--;
                    }

                    else if (listaSintactico[punteroSintactico] == listaTokens[punteroLexico].ValorToken)  // los dos elementos son iguales
                    {
                        if (listaSintactico[punteroSintactico] == -199)  // los dos son simbolo final ????$
                        {
                            revision = true;
                            if (error)
                                MessageBox.Show(@"Analisis Sintactico Terminado, Con Errores");
                            else
                                MessageBox.Show(@"Analisis Sintactico Terminado Correctamente");
                            break;

                        }
                        else    //MATCH (elemento)
                        {
                            if (swSemantico != TipoSemantico.Ninguno)
                                CodigoSemantico();

                            listaSintactico[punteroSintactico] = 0;
                            punteroLexico++;
                            punteroSintactico--;
                            VerificarRecuperacion();
                        }
                    }
                    else  // si los dos terminales de la lista token y de la lista sintactico no son iguales
                    {
                        NuevoError(listaTokens, ref revision, 1);
                    }
                }
                else  // NUMERO POSITIVO : es la parte de traerme la regla del repositorio con ayuda de la matriz
                {
                    renglon = BuscarRenglon(listaSintactico[punteroSintactico]);
                    columna = BuscarColumna(listaTokens[punteroLexico].ValorToken);

                    regla = MatrizTransicionSintactico[renglon, columna];

                    if (regla > 0)  // llamamos a la insersion de reglas.
                    {
                        InsertarRegla(regla);
                        VerificarRecuperacion();
                    }
                    else  // ejecutarr el manejo de errores
                    {
                        if (intentosRecuperar < 1)
                        {
                            tipoRecuperacion = TipoRepecuracion.Sobra;
                        }
                        NuevoError(listaTokens, ref revision, regla);
                    }
                }
            } while (revision != true);

        }

        private void InsertarRegla(int regla)
        {
            int i = 0;
            do
            {
                listaSintactico[punteroSintactico] = RepositorioReglas[regla - 1, i];
                punteroSintactico++;
                i++;

            } while (RepositorioReglas[regla - 1, i] != -130);
            punteroSintactico--;
        }

        private int BuscarColumna(int token)
        {
            switch (token)
            {
                case -1: /*id*/
                    return 0;
                case -2:
                    return 1;
                case -3:
                    return 2;
                case -4:
                    return 3;
                case -5:
                    return 4;
                case -6:
                    return 5;
                case -7:
                    return 6;
                case -8:
                    return 7;
                case -9:
                    return 8;
                case -10:
                    return 9;
                case -11:
                    return 10;
                case -12:
                    return 11;
                case -13:
                    return 12;
                case -14:
                    return 13;
                case -15:
                    return 14;
                case -16:
                    return 15;
                case -17:
                    return 16;
                case -18:
                    return 17;
                case -19:
                    return 18;
                case -20:
                    return 19;
                case -21:
                    return 20;
                case -22:
                    return 21;
                case -23:
                    return 22;
                case -24:
                    return 23;
                case -25:
                    return 24;
                case -26:
                    return 25;
                case -27:
                    return 26;
                case -28:
                    return 27;
                case -29:
                    return 28;
                case -30:
                    return 29;
                case -32:
                    return 30;
                case -33:
                    return 31;
                case -34:
                    return 32;
                case -35:
                    return 33;
                case -36:
                    return 34;
                case -37:
                    return 35;
                case -38:
                    return 36;
                case -39:
                    return 37;
                case -40:
                    return 38;
                case -41:
                    return 39;
                case -42:
                    return 40;
                case -43:
                    return 41;
                case -44:
                    return 42;
                case -45:
                    return 43;
                case -46:
                    return 44;
                case -47:
                    return 45;
                case -48:
                    return 46;
                case -49:
                    return 47;
                case -50:
                    return 48;
                case -51:
                    return 49;
                case -52:
                    return 50;
                case -53:
                    return 51;
                case -54:
                    return 52;
                case -55:
                    return 53;
                case -56:
                    return 54;
                case -57:
                    return 55;
                case -58:
                    return 56;
                case -59:
                    return 57;
                case -60:
                    return 58;
                case -61:
                    return 59;
                case -62:
                    return 60;
                case -63:
                    return 61;
                case -64:
                    return 62;
                case -65:
                    return 63;
                case -66:
                    return 64;
                case -67:
                    return 65;
                case -68:
                    return 66;
                case -69:
                    return 67;
                case -70:
                    return 68;
                case -71:
                    return 69;
                case -72:
                    return 70;
                case -73:
                    return 71;
                case -74:
                    return 72;
                case -75:
                    return 73;
                case -76:
                    return 74;
                case -77:
                    return 75;
                case -78:
                    return 76;
                case -79:
                    return 77;
                case -80:
                    return 78;
                case -81:
                    return 79;
                case -82:
                    return 80;
                case -83:
                    return 81;
                case -84:
                    return 82;
                case -85:
                    return 83;
                case -86:
                    return 84;
                case -87:
                    return 85;
                case -88:
                    return 86;
                case -89:
                    return 87;
                case -90:
                    return 88;
                case -91:
                    return 89;
                case -92:
                    return 90;
                case -93:
                    return 91;
                case -94:
                    return 92;
                case -95:
                    return 93;
                case -96:
                    return 94;
                case -97:
                    return 95;
                case -98:
                    return 96;
                case -99:
                    return 97;
                case -100:
                    return 98;
                case -101:
                    return 99;
                case -102:
                    return 100;
                case -103:
                    return 101;
                case -104:
                    return 102;
                case -105:
                    return 103;
                case -106:
                    return 104;
                case -107:
                    return 105;
                case -108:
                    return 106;
                case -109:
                    return 107;
                case -110:
                    return 108;
                case -111:
                    return 109;
                case -112:
                    return 110;
                case -113:
                    return 111;
                case -114:
                    return 114;
                case -120:
                    return 112;
                case -199:
                    return 113;
                default:
                    return 129;


            }
        }

        private int BuscarRenglon(int regla)
        {
            switch (regla)
            {
                case 1000: /*s*/
                    return 0;
                case 1001: /*programa*/
                    return 1;
                case 1002:
                    return 2;
                case 1003:
                    return 3;
                case 1004:
                    return 4;
                case 1005:
                    return 5;
                case 1006:
                    return 6;
                case 1007:
                    return 7;
                case 1008:
                    return 8;
                case 1009:
                    return 9;
                case 1010:
                    return 10;
                case 1011:
                    return 11;
                case 1012:
                    return 12;
                case 1013:
                    return 13;
                case 1014:
                    return 14;
                case 1015:
                    return 15;
                case 1016:
                    return 16;
                case 1017:
                    return 17;
                case 1018:
                    return 18;
                case 1019:
                    return 19;
                case 1020:
                    return 20;
                case 1021:
                    return 21;
                case 1022:
                    return 22;
                case 1023:
                    return 23;
                case 1024:
                    return 24;
                case 1025:
                    return 25;
                case 1026:
                    return 26;
                case 1027:
                    return 27;
                case 1028:
                    return 28;
                case 1029:
                    return 29;
                case 1030:
                    return 30;
                case 1031:
                    return 31;
                case 1032:
                    return 32;
                case 1033:
                    return 33;
                case 1034:
                    return 34;
                case 1035:
                    return 35;
                case 1036:
                    return 36;
                case 1037:
                    return 37;
                case 1038:
                    return 38;
                case 1039:
                    return 39;
                case 1040:
                    return 40;
                case 1041:
                    return 41;
                case 1042:
                    return 42;
                case 1043:
                    return 43;
                case 1044:
                    return 44;
                case 1045:
                    return 45;
                case 1046:
                    return 46;
                case 1047:
                    return 47;
                case 1048:
                    return 48;
                case 1049:
                    return 49;
                case 1050:
                    return 50;
                case 1051:
                    return 51;
                case 1052:
                    return 52;
                case 1053:
                    return 53;
                case 1054:
                    return 54;
                case 1055:
                    return 55;
                case 1056:
                    return 56;

                default:
                    throw new Exception("error de logica");
            }

        }

        private void NuevoError(List<Token> listaTokens, ref bool revision, int tipo)
        {
            error = true;
            var nuevoError = ManejodeErrores(tipo, listaTokens[punteroLexico].Linea);
            listaError.Add(nuevoError);
            revision = true;
            //   Recuperar(ref revision, ref tipoRecuperacion);

        }

        private void VerificarRecuperacion()
        {
            if (tipoRecuperacion != TipoRepecuracion.Ninguna)
            {
                tipoRecuperacion = TipoRepecuracion.Ninguna;
                intentosRecuperar = 0;
            }
        }

        private Error ManejodeErrores(int error, int linea)
        {
            string mensajeError = "";
            switch (error)
            {
                case 1:  // cuando son terminales 
                    mensajeError = "se esperaba el simbolo: " + listaSintactico[punteroSintactico];
                    break;
                case -600:
                    mensajeError = "se esperaba una estructura de clase o librería.";
                    break;
                case -601:
                    mensajeError = "se esperaba una estructura de librería. ";
                    break;
                case -602:
                    mensajeError = "se esperaba una estructura de herencia ";
                    break;
                case -603:
                    mensajeError = "se esperaba un miembro de una clase ";
                    break;
                case -604:
                    mensajeError = "se esperaba una estructura de clase ";
                    break;
                case -605:
                    mensajeError = "se esperaba un alcance ";
                    break;
                case -606:
                    mensajeError = "se esperaba un estructura de método ";
                    break;
                case -607:
                    mensajeError = "se esperaba una asignación ";
                    break;
                case -608:
                    mensajeError = "se esperaba un tipo de dato";
                    break;
                case -609:
                    mensajeError = "se esperaban parámetros ";
                    break;
                case -610:
                    mensajeError = "se esperaba una expresión ";
                    break;
                case -611:
                    mensajeError = "se esperaba un factor ";
                    break;
                case -612:
                    mensajeError = "se esperaba un termino ";
                    break;
                case -613:
                    mensajeError = "se esperaba un operador aritmético ";
                    break;
                case -614:
                    mensajeError = "se esperaba una estructura de sentencia ";
                    break;
                case -615:
                    mensajeError = "se esperaba una estructura si ";
                    break;
                case -616:
                    mensajeError = "se esperaba una estructura condicional ";
                    break;
                case -617:
                    mensajeError = "se esperaba un factor condicional ";
                    break;
                case -618:
                    mensajeError = "se esperaba un termino condicional ";
                    break;
                case -619:
                    mensajeError = "se esperaba un operador relacional ";
                    break;
                case -620:
                    mensajeError = "se esperaba un operador lógico ";
                    break;
                case -621:
                    mensajeError = "se esperaba una estructura demas ";
                    break;
                case -622:
                    mensajeError = "se esperaba una estructura por ";
                    break;
                case -623:
                    mensajeError = "se esperaba una declaración ";
                    break;
                case -624:
                    mensajeError = "se esperaba una estructura multiple ";
                    break;
                case -625:
                    mensajeError = "se esperaba un incremento ";
                    break;
                case -626:
                    mensajeError = "se esperaba un operador de asignación ";
                    break;
                case -627:
                    mensajeError = "se esperaba una estructura mientras ";
                    break;
                case -628:
                    mensajeError = "se esperaba una estructura hacer ";
                    break;
                case -629:
                    mensajeError = "se esperaba una estructura leer ";
                    break;
                case -630:
                    mensajeError = "se esperaba una estructura escribir ";
                    break;
                case -631:
                    mensajeError = "se esperaba una estructura invocar ";
                    break;
                case -632:
                    mensajeError = "se esperaba un objeto ";
                    break;
                case -633:
                    mensajeError = "se esperaba un parámetro objeto ";
                    break;
                case -634:
                    mensajeError = "se esperaba una estructura cambiar ";
                    break;
                case -635:
                    mensajeError = "se esperaba una estructura casos ";
                    break;
                case -636:
                    mensajeError = "se esperaba una estructura defecto ";
                    break;

                default:
                    break;
            }
            return new Error() { Codigo = error, MensajeError = mensajeError, TipoError = tipoError.Sintactico, Linea = linea };
            // Tenia tipo y puse tipo error
        }

        private void Recuperar(ref bool revision, ref TipoRepecuracion tipo)
        {
            if (intentosRecuperar > 3)
            {
                tipo = TipoRepecuracion.NoMas;
            }

            intentosRecuperar++;

            switch (tipo)
            {
                case TipoRepecuracion.Ninguna:
                    punteroSintactico--;
                    tipo++;
                    break;
                case TipoRepecuracion.Falta:
                    punteroSintactico--;  // muevo sintactio
                    if (intentosRecuperar == 3)
                    {
                        punteroSintactico += 3;
                        tipo = TipoRepecuracion.Diferentes;
                    }
                    break;
                case TipoRepecuracion.Sobra:
                    if (intentosRecuperar == 3)
                    {
                        punteroLexico -= 2;
                        tipo = TipoRepecuracion.Falta;
                    }
                    punteroLexico++;  // muevo lexico
                    break;
                case TipoRepecuracion.Diferentes:
                    punteroLexico++;   // muevo ambos
                    punteroSintactico--;
                    break;

                default:
                    revision = true;
                    MessageBox.Show(@"Analisis Sintactico no se recupero, paro fulminante");
                    break;
            }
        }

        public string devolverMetodo()
        {
            return metodoActual;
        }
        public NodoClase devolverClase()
        {
            return claseActual;
        }

        private void Escuchador()
        {
                                                               
            switch (listaSintactico[punteroSintactico])
            {
                case 1007:
                    swSemantico = TipoSemantico.ClaseIN;
                    break;
                case 1012:
                    swSemantico = TipoSemantico.MetodoIN;
                    break;
                case 1013:
                    swSemantico = TipoSemantico.ParametrosIN;
                    break;
                case 1034:
                    swSemantico = TipoSemantico.VariablesIN;
                    break;

            }
        }

        private void CodigoSemantico()
        {
            listenerSemantico.Add(listaTokens[punteroLexico]);

            if (listaTokens[punteroLexico].ValorToken == -22 /* { */ && swSemantico == TipoSemantico.ClaseIN)
            {
                swSemantico = TipoSemantico.ClassOUT;
            }
            if (listaTokens[punteroLexico].ValorToken == -22 /* { */ && swSemantico == TipoSemantico.MetodoIN)
            {
                swSemantico = TipoSemantico.MetodoOUT;
            }
            if (listaTokens[punteroLexico].ValorToken == -21 /* ) */ && swSemantico == TipoSemantico.ParametrosIN)
            {
                swSemantico = TipoSemantico.ParametrosOUT;
            }
            if (listaTokens[punteroLexico].ValorToken == -27 /* ; */ && swSemantico == TipoSemantico.MetodoIN)
            {
                swSemantico = TipoSemantico.ATributosOUT;
            }
            if (listaTokens[punteroLexico].ValorToken == -27 /* ; */ && swSemantico == TipoSemantico.VariablesIN)
            {
                swSemantico = TipoSemantico.VariablesOUT;
            }


            //**********************************************************************************
            //**********************************************************************************
            //Lista de tokens temporal para una clase



            if (swSemantico == TipoSemantico.ClassOUT)
            {

                int puntero2 = 0;

                NodoClase minodoClase = new NodoClase();

                if (listenerSemantico[puntero2].ValorToken < -109 && listenerSemantico[puntero2].ValorToken > -113)
                {
                    switch (listenerSemantico[puntero2].ValorToken)
                    {
                        case -110:
                            minodoClase.MiAlcance = Alcance.Public;
                            break;
                        case -111:
                            minodoClase.MiAlcance = Alcance.Protected;
                            break;
                        case -112:
                            minodoClase.MiAlcance = Alcance.Private;
                            break;
                        default:
                            break;
                    }
                    puntero2++;
                }
                else
                {
                    minodoClase.MiAlcance = Alcance.Public;
                }
                puntero2++;
                minodoClase.Lexema = listenerSemantico[puntero2].Lexema;  // captura nombre de la clase
                puntero2++;

                //comprueba herencia
                if (listenerSemantico[puntero2].ValorToken == -50)  // extender
                {
                    puntero2++;

                    TablaSimbolos.ExisteClaseHeredada(listenerSemantico[puntero2].Lexema);
                    if (TablaSimbolos.herencia == true)
                    {
                        minodoClase.Herencia = listenerSemantico[puntero2].Lexema;

                    }
                    puntero2++;
                }
                if (listenerSemantico[puntero2].ValorToken == -22) // {
                {
                    minodoClase.RenglonDeclaracion = listenerSemantico[puntero2].Linea;
                    TablaSimbolos.ClaseActiva = minodoClase;
                    TablaSimbolos.InsertarNodoClase(minodoClase);

                    claseActual = minodoClase;

                    listenerSemantico = new List<Token>();

                    swSemantico = TipoSemantico.Ninguno;
                    puntero2 = 0;
                }

            }

            //**********************************************************************************
            //**********************************************************************************

            //Lista de tokens de los atributos
            if (swSemantico == TipoSemantico.ATributosOUT)
            {
                int puntero2 = 0;
                NodoAtributo minodoatributo = new NodoAtributo();
                if (listenerSemantico[puntero2].ValorToken < -109 && listenerSemantico[puntero2].ValorToken > -113)  // valoresTK de alcance-
                {
                    switch (listenerSemantico[puntero2].ValorToken)
                    {
                        case -110:
                            minodoatributo.MiAlcance = Alcance.Public;
                            break;
                        case -111:
                            minodoatributo.MiAlcance = Alcance.Protected;
                            break;
                        case -112:
                            minodoatributo.MiAlcance = Alcance.Private;
                            break;
                        default:
                            break;
                    }
                    puntero2++;
                }
                else
                {
                    minodoatributo.MiAlcance = Alcance.Private;
                }

                if (listenerSemantico[puntero2].ValorToken < -94 && listenerSemantico[puntero2].ValorToken > -104)

                //-95 void     -99 int     -100 double     -102 string     -103 bool
                {
                    switch (listenerSemantico[puntero2].ValorToken)
                    {

                        case -99:
                            minodoatributo.MiTipo = TipoDato.INT;
                            break;
                        case -100:
                            minodoatributo.MiTipo = TipoDato.DOUBLE;
                            break;
                        case -102:
                            minodoatributo.MiTipo = TipoDato.STRING;
                            break;
                        case -103:
                            minodoatributo.MiTipo = TipoDato.BOOL;
                            break;
                        default:
                            break;
                    }
                }
                else
                {
                    minodoatributo.MiTipo = TipoDato.NADA;
                }

                puntero2++;
                minodoatributo.Lexema = listenerSemantico[puntero2].Lexema;
                puntero2++;

                if (listenerSemantico[puntero2].ValorToken == -107)  // =
                {
                    puntero2++;
                    minodoatributo.Valor = listenerSemantico[puntero2].Lexema;
                    puntero2++;
                }
                else
                {
                    minodoatributo.Valor = " ";
                }
                if (listenerSemantico[puntero2].ValorToken == -27) // ;
                {
                    minodoatributo.RenglonDec = listenerSemantico[puntero2].Linea;

                    TablaSimbolos.InsertarNodoAtributo(minodoatributo, TablaSimbolos.BusquedaNodoClasePorLexema(TablaSimbolos.ClaseActiva.Lexema));

                    listenerSemantico = new List<Token>();

                    swSemantico = TipoSemantico.Ninguno;
                    puntero2 = 0;
                }

            }

            //**********************************************************************************
            //**********************************************************************************

            //Tokens para el metodo

            if (swSemantico == TipoSemantico.MetodoOUT)
            {
                int puntero2 = 0;

                NodoMetodo minodoMetodo = new NodoMetodo();
                NodoVariable minodovariable = new NodoVariable();


                if (listenerSemantico[puntero2].ValorToken < -109 && listenerSemantico[puntero2].ValorToken > -113)
                {
                    switch (listenerSemantico[puntero2].ValorToken)
                    {
                        case -110:
                            minodoMetodo.MiAlcance = "publico";
                            break;
                        case -111:
                            minodoMetodo.MiAlcance = "protegido";
                            break;
                        case -112:
                            minodoMetodo.MiAlcance = "privado";
                            break;
                        default:
                            break;
                    }
                    puntero2++;
                }
                else
                {
                    minodoMetodo.MiAlcance = "publico";
                }
                if (listenerSemantico[puntero2].ValorToken < -94 && listenerSemantico[puntero2].ValorToken > -104)
                //-95 void     -99 int     -100 double     -102 string     -103 bool
                {
                    switch (listenerSemantico[puntero2].ValorToken)
                    {
                        case -95:
                            minodoMetodo.MiRegreso = "void";
                            break;
                        case -99:
                            minodoMetodo.MiRegreso = "int";
                            break;
                        case -100:
                            minodoMetodo.MiRegreso = "doble";
                            break;
                        case -102:
                            minodoMetodo.MiRegreso = "string";
                            break;
                        case -103:
                            minodoMetodo.MiRegreso = "bool";
                            break;
                        default:
                            break;
                    }
                    puntero2++;
                }
                else
                {
                    minodoMetodo.MiRegreso = "void";
                }

                minodoMetodo.Lexema = listenerSemantico[puntero2].Lexema; // nombre del metodo
                TablaSimbolos.MetodoActivo = minodoMetodo;               // Metodo Actual
                minodoMetodo.RenglonDeclaracion = listenerSemantico[puntero2].Linea; // Liena de declaracion
                puntero2++; // (
                puntero2++; // int or doble or string , bool

                // publico void repetir ( String msg , int repeticiones)
                if (listenerSemantico[puntero2].ValorToken < -98
                    && listenerSemantico[puntero2].ValorToken > -104) // verificar si hay paramatros
                {
                    do
                    {
                        //puntero2++;
                        switch (listenerSemantico[puntero2].ValorToken)
                        {

                            case -99:
                                minodovariable.miTipoDato = "int";
                                break;
                            case -100:
                                minodovariable.miTipoDato = "doble";
                                break;
                            case -102:
                                minodovariable.miTipoDato = "string";
                                break;
                            case -103:
                                minodovariable.miTipoDato = "bool";
                                break;
                            default:
                                break;
                        }
                        puntero2++;

                        minodovariable.lexema = listenerSemantico[puntero2].Lexema;     //nombre del parametro
                        minodovariable.reglonDec = listenerSemantico[puntero2].Linea;   //Linea de decla del parametro
                        minodovariable.miTipoVariable = TipoVariable.parametro;         //Tipo de variable: Parametro
                        listaparam.Add(minodovariable);
                        minodovariable = new NodoVariable();

                        puntero2++;
                        if (listenerSemantico[puntero2].ValorToken != -26) break;
                        puntero2++;

                    } while (true);


                }
                TablaSimbolos.InsertarNodoMetodo(minodoMetodo, listaparam,
                    TablaSimbolos.BusquedaNodoClasePorLexema(TablaSimbolos.ClaseActiva.Lexema));

                metodoActual = minodoMetodo.Lexema;

                listenerSemantico = new List<Token>();
                listaparam.Clear();
                swSemantico = TipoSemantico.Ninguno;
                puntero2 = 0;

            }

            //**********************************************************************************
            //**********************************************************************************

            //Tokens para Variables

            if (swSemantico == TipoSemantico.VariablesOUT)
            {
                int puntero2 = 0;
                string valor = null;

                NodoVariable minodovariable = new NodoVariable();
                minodovariable.RenglonDec = listenerSemantico[puntero2].Linea;
                minodovariable.MitipoVariable = TipoVariable.variableLocal;

                if (listenerSemantico[puntero2].ValorToken < -94 && listenerSemantico[puntero2].ValorToken > -104)

                //-95 void     -99 int     -100 double     -102 string     -103 bool
                {
                    switch (listenerSemantico[puntero2].ValorToken)
                    {

                        case -99:
                            minodovariable.MiTipo = "int";
                            break;
                        case -100:
                            minodovariable.MiTipo = "doble";
                            break;
                        case -102:
                            minodovariable.MiTipo = "string";
                            break;
                        case -103:
                            minodovariable.MiTipo = "bool";
                            break;
                        default:
                            break;
                    }
                    puntero2++;
                }
                else
                {
                    minodovariable.MiTipo = "Nada";
                }

                minodovariable.Lexema = listenerSemantico[puntero2].Lexema;  // nombre de varaible
                puntero2++;
                if (listenerSemantico[puntero2].ValorToken == -107)  //   = -107
                {
                    while (true)
                    {
                        puntero2++;
                        //int x =  1 + a + 1 - a - b - 3 + 4;
                        if (listenerSemantico[puntero2].ValorToken == -1)
                        {
                            TablaSimbolos.ExisteVaraible(listenerSemantico[puntero2].Lexema, TablaSimbolos.MetodoActivo, listenerSemantico[puntero2].Linea);
                            if (TablaSimbolos.herencia == true)
                            {
                                valor += listenerSemantico[puntero2].Lexema;
                                puntero2++;
                            }
                        }
                        if (listenerSemantico[puntero2].ValorToken == -2 || listenerSemantico[puntero2].ValorToken == -3)
                        {
                            valor += listenerSemantico[puntero2].Lexema;
                            puntero2++;
                        }
                        valor += listenerSemantico[puntero2].Lexema;

                        if (listenerSemantico[puntero2].ValorToken == -27)
                        {
                            minodovariable.Valor = valor;
                            break;
                        }


                    }

                }

                TablaSimbolos.InsertarNodoVariable(minodovariable, TablaSimbolos.ClaseActiva, TablaSimbolos.MetodoActivo.Lexema);

                listenerSemantico = new List<Token>();
                swSemantico = TipoSemantico.Ninguno;
                puntero2 = 0;
            }

            // leer invocacion de metodos
            if (swSemantico == TipoSemantico.VariablesOUT)
            {



            }


            }
    }
}

/*
 *  1. clases
 *  2. herencia false true
 *  3. atributos
 *  4. metodos
 *  5. parametros
 *  6. variables 
 *  7. sobrecarga
 * validar en TABLA DE SIMBOLOS: (Que es lo que se va a validar)


- variables locales no repetidas (el mismo ambito)                              |*

- clases no repetidas                                                           |*

- herencia (que exista la clase a heredar).                                     |*

- metodos no repetido. (soportar sobrecarga)                                    |-

- invocacion (validar que exista el metodo 
u objeto invocado junto con sus parametros)                                     |-

- validar  existencia de variables. (int x = a+1, es comprobar que exista a)    |*

- validar ambitos.                                                              |-

- validar asignaciones y declaraciones en
for, if, {cualquier lugar donde se use id};                                     |--

- marcar el warning de variable nunca usada.                                    |

- marcar el warning de variable no tiene un valor asignado.                     |

- parametros y variables locales se encuentran en el mismo ambito               |

- atributos y variables locales si pueden llamarse igual                        |*
 * 
 */